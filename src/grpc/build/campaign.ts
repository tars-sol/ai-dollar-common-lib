// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: campaign.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "campaign";

/** Request message for creating a campaign */
export interface CreateCampaignRequest {
  brandId: string;
  amountToInvest: number;
  startDate: string;
  endDate: string;
  tasks: TaskInput[];
  name: string;
  description: string;
  profileIds: string[];
  isPrivate: boolean;
}

export interface SuccessResponse {
  success: boolean;
}

/** Single task input (part of the campaign) */
export interface TaskInput {
  title: string;
  description: string;
  type: string;
}

export interface UpdateTaskRequest {
  title?: string | undefined;
  description?: string | undefined;
  brandId: string;
  type?: string | undefined;
  id: string;
}

export interface JoinPublicCampaignRequest {
  campaignId: string;
  profileId: string;
}

export interface LeaveCampaignRequest {
  campaignId: string;
  profileId: string;
}

export interface UpdatePrivateCampaignProfilesRequest {
  campaignId: string;
  profileId: string;
  brandId: string;
}

/** Response message after creating a campaign */
export interface CampaignResponse {
  id: string;
  brandId: string;
  amountToInvest: number;
  startDate: string;
  endDate: string;
  createdAt: string;
  updatedAt: string;
  status: string;
  isPrivate: boolean;
  name: string;
  description: string;
}

export interface UpdateCampaignRequest {
  id: string;
  brandId: string;
  amountToInvest?: number | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
}

/** Task returned in the response */
export interface TaskResponse {
  id: string;
  title: string;
  description: string;
  campaignId: string;
  type: string;
  createdAt: string;
  updatedAt: string;
}

export interface TaskCompletedResponse {
  campaignId: string;
  taskId: string;
  profileId: string;
  brandId: string;
}

export interface GetCampaignsByBrandIdRequest {
  roleId: string;
  role: string;
  brandId?:
    | string
    | undefined;
  /** e.g., "createdAt", "amountToInvest" */
  sortBy?:
    | string
    | undefined;
  /** "asc" or "desc" */
  sortOrder?:
    | string
    | undefined;
  /** e.g., "active", "completed" */
  status?:
    | string
    | undefined;
  /** e.g., "2023-01-01" */
  startDateFrom?:
    | string
    | undefined;
  /** e.g., "2023-12-31" */
  startDateTo?:
    | string
    | undefined;
  /** e.g., "2023-01-01" */
  endDateFrom?:
    | string
    | undefined;
  /** e.g., "2023-12-31" */
  endDateTo?: string | undefined;
}

export interface CampaignsByIdRequest {
  id: string;
  roleId: string;
  role: string;
}

export interface DeleteTaskByIdRequest {
  brandId: string;
  id: string;
}

export interface DeleteCampaignByIdRequest {
  brandId: string;
  id: string;
}

export interface GetTasksByCampaignIdRequest {
  campaignId: string;
}

export interface GetTasksResponse {
  tasks: TaskResponse[];
}

export interface GetCampaignsResponse {
  campaigns: CampaignResponse[];
}

function createBaseCreateCampaignRequest(): CreateCampaignRequest {
  return {
    brandId: "",
    amountToInvest: 0,
    startDate: "",
    endDate: "",
    tasks: [],
    name: "",
    description: "",
    profileIds: [],
    isPrivate: false,
  };
}

export const CreateCampaignRequest: MessageFns<CreateCampaignRequest> = {
  encode(message: CreateCampaignRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.brandId !== "") {
      writer.uint32(10).string(message.brandId);
    }
    if (message.amountToInvest !== 0) {
      writer.uint32(17).double(message.amountToInvest);
    }
    if (message.startDate !== "") {
      writer.uint32(26).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(34).string(message.endDate);
    }
    for (const v of message.tasks) {
      TaskInput.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    for (const v of message.profileIds) {
      writer.uint32(74).string(v!);
    }
    if (message.isPrivate !== false) {
      writer.uint32(80).bool(message.isPrivate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCampaignRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCampaignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.amountToInvest = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tasks.push(TaskInput.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.profileIds.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isPrivate = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCampaignRequest {
    return {
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      amountToInvest: isSet(object.amountToInvest) ? globalThis.Number(object.amountToInvest) : 0,
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => TaskInput.fromJSON(e)) : [],
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      profileIds: globalThis.Array.isArray(object?.profileIds)
        ? object.profileIds.map((e: any) => globalThis.String(e))
        : [],
      isPrivate: isSet(object.isPrivate) ? globalThis.Boolean(object.isPrivate) : false,
    };
  },

  toJSON(message: CreateCampaignRequest): unknown {
    const obj: any = {};
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.amountToInvest !== 0) {
      obj.amountToInvest = message.amountToInvest;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => TaskInput.toJSON(e));
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.profileIds?.length) {
      obj.profileIds = message.profileIds;
    }
    if (message.isPrivate !== false) {
      obj.isPrivate = message.isPrivate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCampaignRequest>, I>>(base?: I): CreateCampaignRequest {
    return CreateCampaignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCampaignRequest>, I>>(object: I): CreateCampaignRequest {
    const message = createBaseCreateCampaignRequest();
    message.brandId = object.brandId ?? "";
    message.amountToInvest = object.amountToInvest ?? 0;
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.tasks = object.tasks?.map((e) => TaskInput.fromPartial(e)) || [];
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.profileIds = object.profileIds?.map((e) => e) || [];
    message.isPrivate = object.isPrivate ?? false;
    return message;
  },
};

function createBaseSuccessResponse(): SuccessResponse {
  return { success: false };
}

export const SuccessResponse: MessageFns<SuccessResponse> = {
  encode(message: SuccessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuccessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuccessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuccessResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: SuccessResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SuccessResponse>, I>>(base?: I): SuccessResponse {
    return SuccessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SuccessResponse>, I>>(object: I): SuccessResponse {
    const message = createBaseSuccessResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseTaskInput(): TaskInput {
  return { title: "", description: "", type: "" };
}

export const TaskInput: MessageFns<TaskInput> = {
  encode(message: TaskInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskInput {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: TaskInput): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskInput>, I>>(base?: I): TaskInput {
    return TaskInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskInput>, I>>(object: I): TaskInput {
    const message = createBaseTaskInput();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseUpdateTaskRequest(): UpdateTaskRequest {
  return { title: undefined, description: undefined, brandId: "", type: undefined, id: "" };
}

export const UpdateTaskRequest: MessageFns<UpdateTaskRequest> = {
  encode(message: UpdateTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.brandId !== "") {
      writer.uint32(42).string(message.brandId);
    }
    if (message.type !== undefined) {
      writer.uint32(26).string(message.type);
    }
    if (message.id !== "") {
      writer.uint32(34).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTaskRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: UpdateTaskRequest): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.type !== undefined) {
      obj.type = message.type;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTaskRequest>, I>>(base?: I): UpdateTaskRequest {
    return UpdateTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTaskRequest>, I>>(object: I): UpdateTaskRequest {
    const message = createBaseUpdateTaskRequest();
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.brandId = object.brandId ?? "";
    message.type = object.type ?? undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseJoinPublicCampaignRequest(): JoinPublicCampaignRequest {
  return { campaignId: "", profileId: "" };
}

export const JoinPublicCampaignRequest: MessageFns<JoinPublicCampaignRequest> = {
  encode(message: JoinPublicCampaignRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaignId !== "") {
      writer.uint32(10).string(message.campaignId);
    }
    if (message.profileId !== "") {
      writer.uint32(18).string(message.profileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinPublicCampaignRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinPublicCampaignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profileId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinPublicCampaignRequest {
    return {
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
    };
  },

  toJSON(message: JoinPublicCampaignRequest): unknown {
    const obj: any = {};
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.profileId !== "") {
      obj.profileId = message.profileId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinPublicCampaignRequest>, I>>(base?: I): JoinPublicCampaignRequest {
    return JoinPublicCampaignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinPublicCampaignRequest>, I>>(object: I): JoinPublicCampaignRequest {
    const message = createBaseJoinPublicCampaignRequest();
    message.campaignId = object.campaignId ?? "";
    message.profileId = object.profileId ?? "";
    return message;
  },
};

function createBaseLeaveCampaignRequest(): LeaveCampaignRequest {
  return { campaignId: "", profileId: "" };
}

export const LeaveCampaignRequest: MessageFns<LeaveCampaignRequest> = {
  encode(message: LeaveCampaignRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaignId !== "") {
      writer.uint32(10).string(message.campaignId);
    }
    if (message.profileId !== "") {
      writer.uint32(18).string(message.profileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaveCampaignRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaveCampaignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profileId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaveCampaignRequest {
    return {
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
    };
  },

  toJSON(message: LeaveCampaignRequest): unknown {
    const obj: any = {};
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.profileId !== "") {
      obj.profileId = message.profileId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaveCampaignRequest>, I>>(base?: I): LeaveCampaignRequest {
    return LeaveCampaignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeaveCampaignRequest>, I>>(object: I): LeaveCampaignRequest {
    const message = createBaseLeaveCampaignRequest();
    message.campaignId = object.campaignId ?? "";
    message.profileId = object.profileId ?? "";
    return message;
  },
};

function createBaseUpdatePrivateCampaignProfilesRequest(): UpdatePrivateCampaignProfilesRequest {
  return { campaignId: "", profileId: "", brandId: "" };
}

export const UpdatePrivateCampaignProfilesRequest: MessageFns<UpdatePrivateCampaignProfilesRequest> = {
  encode(message: UpdatePrivateCampaignProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaignId !== "") {
      writer.uint32(10).string(message.campaignId);
    }
    if (message.profileId !== "") {
      writer.uint32(18).string(message.profileId);
    }
    if (message.brandId !== "") {
      writer.uint32(26).string(message.brandId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePrivateCampaignProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePrivateCampaignProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profileId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePrivateCampaignProfilesRequest {
    return {
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
    };
  },

  toJSON(message: UpdatePrivateCampaignProfilesRequest): unknown {
    const obj: any = {};
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.profileId !== "") {
      obj.profileId = message.profileId;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePrivateCampaignProfilesRequest>, I>>(
    base?: I,
  ): UpdatePrivateCampaignProfilesRequest {
    return UpdatePrivateCampaignProfilesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePrivateCampaignProfilesRequest>, I>>(
    object: I,
  ): UpdatePrivateCampaignProfilesRequest {
    const message = createBaseUpdatePrivateCampaignProfilesRequest();
    message.campaignId = object.campaignId ?? "";
    message.profileId = object.profileId ?? "";
    message.brandId = object.brandId ?? "";
    return message;
  },
};

function createBaseCampaignResponse(): CampaignResponse {
  return {
    id: "",
    brandId: "",
    amountToInvest: 0,
    startDate: "",
    endDate: "",
    createdAt: "",
    updatedAt: "",
    status: "",
    isPrivate: false,
    name: "",
    description: "",
  };
}

export const CampaignResponse: MessageFns<CampaignResponse> = {
  encode(message: CampaignResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.brandId !== "") {
      writer.uint32(18).string(message.brandId);
    }
    if (message.amountToInvest !== 0) {
      writer.uint32(25).double(message.amountToInvest);
    }
    if (message.startDate !== "") {
      writer.uint32(34).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(42).string(message.endDate);
    }
    if (message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    if (message.status !== "") {
      writer.uint32(90).string(message.status);
    }
    if (message.isPrivate !== false) {
      writer.uint32(96).bool(message.isPrivate);
    }
    if (message.name !== "") {
      writer.uint32(74).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(82).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.amountToInvest = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isPrivate = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      amountToInvest: isSet(object.amountToInvest) ? globalThis.Number(object.amountToInvest) : 0,
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      isPrivate: isSet(object.isPrivate) ? globalThis.Boolean(object.isPrivate) : false,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CampaignResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.amountToInvest !== 0) {
      obj.amountToInvest = message.amountToInvest;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.isPrivate !== false) {
      obj.isPrivate = message.isPrivate;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignResponse>, I>>(base?: I): CampaignResponse {
    return CampaignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignResponse>, I>>(object: I): CampaignResponse {
    const message = createBaseCampaignResponse();
    message.id = object.id ?? "";
    message.brandId = object.brandId ?? "";
    message.amountToInvest = object.amountToInvest ?? 0;
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.status = object.status ?? "";
    message.isPrivate = object.isPrivate ?? false;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseUpdateCampaignRequest(): UpdateCampaignRequest {
  return {
    id: "",
    brandId: "",
    amountToInvest: undefined,
    startDate: undefined,
    endDate: undefined,
    name: undefined,
    description: undefined,
  };
}

export const UpdateCampaignRequest: MessageFns<UpdateCampaignRequest> = {
  encode(message: UpdateCampaignRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.brandId !== "") {
      writer.uint32(18).string(message.brandId);
    }
    if (message.amountToInvest !== undefined) {
      writer.uint32(25).double(message.amountToInvest);
    }
    if (message.startDate !== undefined) {
      writer.uint32(34).string(message.startDate);
    }
    if (message.endDate !== undefined) {
      writer.uint32(42).string(message.endDate);
    }
    if (message.name !== undefined) {
      writer.uint32(74).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(82).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCampaignRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCampaignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.amountToInvest = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCampaignRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      amountToInvest: isSet(object.amountToInvest) ? globalThis.Number(object.amountToInvest) : undefined,
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: UpdateCampaignRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.amountToInvest !== undefined) {
      obj.amountToInvest = message.amountToInvest;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCampaignRequest>, I>>(base?: I): UpdateCampaignRequest {
    return UpdateCampaignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCampaignRequest>, I>>(object: I): UpdateCampaignRequest {
    const message = createBaseUpdateCampaignRequest();
    message.id = object.id ?? "";
    message.brandId = object.brandId ?? "";
    message.amountToInvest = object.amountToInvest ?? undefined;
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    return message;
  },
};

function createBaseTaskResponse(): TaskResponse {
  return { id: "", title: "", description: "", campaignId: "", type: "", createdAt: "", updatedAt: "" };
}

export const TaskResponse: MessageFns<TaskResponse> = {
  encode(message: TaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.campaignId !== "") {
      writer.uint32(58).string(message.campaignId);
    }
    if (message.type !== "") {
      writer.uint32(66).string(message.type);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(50).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: TaskResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskResponse>, I>>(base?: I): TaskResponse {
    return TaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskResponse>, I>>(object: I): TaskResponse {
    const message = createBaseTaskResponse();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.campaignId = object.campaignId ?? "";
    message.type = object.type ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseTaskCompletedResponse(): TaskCompletedResponse {
  return { campaignId: "", taskId: "", profileId: "", brandId: "" };
}

export const TaskCompletedResponse: MessageFns<TaskCompletedResponse> = {
  encode(message: TaskCompletedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaignId !== "") {
      writer.uint32(10).string(message.campaignId);
    }
    if (message.taskId !== "") {
      writer.uint32(18).string(message.taskId);
    }
    if (message.profileId !== "") {
      writer.uint32(26).string(message.profileId);
    }
    if (message.brandId !== "") {
      writer.uint32(34).string(message.brandId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskCompletedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskCompletedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.profileId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskCompletedResponse {
    return {
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
    };
  },

  toJSON(message: TaskCompletedResponse): unknown {
    const obj: any = {};
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.profileId !== "") {
      obj.profileId = message.profileId;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskCompletedResponse>, I>>(base?: I): TaskCompletedResponse {
    return TaskCompletedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskCompletedResponse>, I>>(object: I): TaskCompletedResponse {
    const message = createBaseTaskCompletedResponse();
    message.campaignId = object.campaignId ?? "";
    message.taskId = object.taskId ?? "";
    message.profileId = object.profileId ?? "";
    message.brandId = object.brandId ?? "";
    return message;
  },
};

function createBaseGetCampaignsByBrandIdRequest(): GetCampaignsByBrandIdRequest {
  return {
    roleId: "",
    role: "",
    brandId: undefined,
    sortBy: undefined,
    sortOrder: undefined,
    status: undefined,
    startDateFrom: undefined,
    startDateTo: undefined,
    endDateFrom: undefined,
    endDateTo: undefined,
  };
}

export const GetCampaignsByBrandIdRequest: MessageFns<GetCampaignsByBrandIdRequest> = {
  encode(message: GetCampaignsByBrandIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roleId !== "") {
      writer.uint32(10).string(message.roleId);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.brandId !== undefined) {
      writer.uint32(18).string(message.brandId);
    }
    if (message.sortBy !== undefined) {
      writer.uint32(34).string(message.sortBy);
    }
    if (message.sortOrder !== undefined) {
      writer.uint32(42).string(message.sortOrder);
    }
    if (message.status !== undefined) {
      writer.uint32(50).string(message.status);
    }
    if (message.startDateFrom !== undefined) {
      writer.uint32(58).string(message.startDateFrom);
    }
    if (message.startDateTo !== undefined) {
      writer.uint32(66).string(message.startDateTo);
    }
    if (message.endDateFrom !== undefined) {
      writer.uint32(74).string(message.endDateFrom);
    }
    if (message.endDateTo !== undefined) {
      writer.uint32(82).string(message.endDateTo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCampaignsByBrandIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCampaignsByBrandIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roleId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sortBy = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sortOrder = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.startDateFrom = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.startDateTo = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.endDateFrom = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.endDateTo = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCampaignsByBrandIdRequest {
    return {
      roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : undefined,
      sortBy: isSet(object.sortBy) ? globalThis.String(object.sortBy) : undefined,
      sortOrder: isSet(object.sortOrder) ? globalThis.String(object.sortOrder) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : undefined,
      startDateFrom: isSet(object.startDateFrom) ? globalThis.String(object.startDateFrom) : undefined,
      startDateTo: isSet(object.startDateTo) ? globalThis.String(object.startDateTo) : undefined,
      endDateFrom: isSet(object.endDateFrom) ? globalThis.String(object.endDateFrom) : undefined,
      endDateTo: isSet(object.endDateTo) ? globalThis.String(object.endDateTo) : undefined,
    };
  },

  toJSON(message: GetCampaignsByBrandIdRequest): unknown {
    const obj: any = {};
    if (message.roleId !== "") {
      obj.roleId = message.roleId;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.brandId !== undefined) {
      obj.brandId = message.brandId;
    }
    if (message.sortBy !== undefined) {
      obj.sortBy = message.sortBy;
    }
    if (message.sortOrder !== undefined) {
      obj.sortOrder = message.sortOrder;
    }
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    if (message.startDateFrom !== undefined) {
      obj.startDateFrom = message.startDateFrom;
    }
    if (message.startDateTo !== undefined) {
      obj.startDateTo = message.startDateTo;
    }
    if (message.endDateFrom !== undefined) {
      obj.endDateFrom = message.endDateFrom;
    }
    if (message.endDateTo !== undefined) {
      obj.endDateTo = message.endDateTo;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCampaignsByBrandIdRequest>, I>>(base?: I): GetCampaignsByBrandIdRequest {
    return GetCampaignsByBrandIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCampaignsByBrandIdRequest>, I>>(object: I): GetCampaignsByBrandIdRequest {
    const message = createBaseGetCampaignsByBrandIdRequest();
    message.roleId = object.roleId ?? "";
    message.role = object.role ?? "";
    message.brandId = object.brandId ?? undefined;
    message.sortBy = object.sortBy ?? undefined;
    message.sortOrder = object.sortOrder ?? undefined;
    message.status = object.status ?? undefined;
    message.startDateFrom = object.startDateFrom ?? undefined;
    message.startDateTo = object.startDateTo ?? undefined;
    message.endDateFrom = object.endDateFrom ?? undefined;
    message.endDateTo = object.endDateTo ?? undefined;
    return message;
  },
};

function createBaseCampaignsByIdRequest(): CampaignsByIdRequest {
  return { id: "", roleId: "", role: "" };
}

export const CampaignsByIdRequest: MessageFns<CampaignsByIdRequest> = {
  encode(message: CampaignsByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.roleId !== "") {
      writer.uint32(26).string(message.roleId);
    }
    if (message.role !== "") {
      writer.uint32(34).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CampaignsByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaignsByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.roleId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CampaignsByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
    };
  },

  toJSON(message: CampaignsByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.roleId !== "") {
      obj.roleId = message.roleId;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CampaignsByIdRequest>, I>>(base?: I): CampaignsByIdRequest {
    return CampaignsByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CampaignsByIdRequest>, I>>(object: I): CampaignsByIdRequest {
    const message = createBaseCampaignsByIdRequest();
    message.id = object.id ?? "";
    message.roleId = object.roleId ?? "";
    message.role = object.role ?? "";
    return message;
  },
};

function createBaseDeleteTaskByIdRequest(): DeleteTaskByIdRequest {
  return { brandId: "", id: "" };
}

export const DeleteTaskByIdRequest: MessageFns<DeleteTaskByIdRequest> = {
  encode(message: DeleteTaskByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.brandId !== "") {
      writer.uint32(18).string(message.brandId);
    }
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTaskByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTaskByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTaskByIdRequest {
    return {
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: DeleteTaskByIdRequest): unknown {
    const obj: any = {};
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTaskByIdRequest>, I>>(base?: I): DeleteTaskByIdRequest {
    return DeleteTaskByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTaskByIdRequest>, I>>(object: I): DeleteTaskByIdRequest {
    const message = createBaseDeleteTaskByIdRequest();
    message.brandId = object.brandId ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteCampaignByIdRequest(): DeleteCampaignByIdRequest {
  return { brandId: "", id: "" };
}

export const DeleteCampaignByIdRequest: MessageFns<DeleteCampaignByIdRequest> = {
  encode(message: DeleteCampaignByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.brandId !== "") {
      writer.uint32(18).string(message.brandId);
    }
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCampaignByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCampaignByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCampaignByIdRequest {
    return {
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: DeleteCampaignByIdRequest): unknown {
    const obj: any = {};
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCampaignByIdRequest>, I>>(base?: I): DeleteCampaignByIdRequest {
    return DeleteCampaignByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCampaignByIdRequest>, I>>(object: I): DeleteCampaignByIdRequest {
    const message = createBaseDeleteCampaignByIdRequest();
    message.brandId = object.brandId ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetTasksByCampaignIdRequest(): GetTasksByCampaignIdRequest {
  return { campaignId: "" };
}

export const GetTasksByCampaignIdRequest: MessageFns<GetTasksByCampaignIdRequest> = {
  encode(message: GetTasksByCampaignIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaignId !== "") {
      writer.uint32(10).string(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTasksByCampaignIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTasksByCampaignIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTasksByCampaignIdRequest {
    return { campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "" };
  },

  toJSON(message: GetTasksByCampaignIdRequest): unknown {
    const obj: any = {};
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTasksByCampaignIdRequest>, I>>(base?: I): GetTasksByCampaignIdRequest {
    return GetTasksByCampaignIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTasksByCampaignIdRequest>, I>>(object: I): GetTasksByCampaignIdRequest {
    const message = createBaseGetTasksByCampaignIdRequest();
    message.campaignId = object.campaignId ?? "";
    return message;
  },
};

function createBaseGetTasksResponse(): GetTasksResponse {
  return { tasks: [] };
}

export const GetTasksResponse: MessageFns<GetTasksResponse> = {
  encode(message: GetTasksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tasks) {
      TaskResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTasksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTasksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tasks.push(TaskResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTasksResponse {
    return {
      tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => TaskResponse.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetTasksResponse): unknown {
    const obj: any = {};
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => TaskResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTasksResponse>, I>>(base?: I): GetTasksResponse {
    return GetTasksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTasksResponse>, I>>(object: I): GetTasksResponse {
    const message = createBaseGetTasksResponse();
    message.tasks = object.tasks?.map((e) => TaskResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetCampaignsResponse(): GetCampaignsResponse {
  return { campaigns: [] };
}

export const GetCampaignsResponse: MessageFns<GetCampaignsResponse> = {
  encode(message: GetCampaignsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.campaigns) {
      CampaignResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCampaignsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCampaignsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaigns.push(CampaignResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCampaignsResponse {
    return {
      campaigns: globalThis.Array.isArray(object?.campaigns)
        ? object.campaigns.map((e: any) => CampaignResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetCampaignsResponse): unknown {
    const obj: any = {};
    if (message.campaigns?.length) {
      obj.campaigns = message.campaigns.map((e) => CampaignResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCampaignsResponse>, I>>(base?: I): GetCampaignsResponse {
    return GetCampaignsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCampaignsResponse>, I>>(object: I): GetCampaignsResponse {
    const message = createBaseGetCampaignsResponse();
    message.campaigns = object.campaigns?.map((e) => CampaignResponse.fromPartial(e)) || [];
    return message;
  },
};

/** gRPC Service */
export interface CampaignService {
  CreateCampaign(request: CreateCampaignRequest): Promise<CampaignResponse>;
  GetCampaignsByBrandId(request: GetCampaignsByBrandIdRequest): Promise<GetCampaignsResponse>;
  GetCampaignById(request: CampaignsByIdRequest): Promise<CampaignResponse>;
  UpdateCampaign(request: UpdateCampaignRequest): Promise<CampaignResponse>;
  UpdateCampaignTasks(request: UpdateTaskRequest): Promise<TaskResponse>;
  GetTasksByCampaignId(request: GetTasksByCampaignIdRequest): Promise<GetTasksResponse>;
  DeleteCampaignById(request: CampaignsByIdRequest): Promise<CampaignResponse>;
  DeleteTaskById(request: DeleteTaskByIdRequest): Promise<TaskResponse>;
  AddProfileToCampaign(request: UpdatePrivateCampaignProfilesRequest): Promise<SuccessResponse>;
  RemoveProfileFromCampaign(request: UpdatePrivateCampaignProfilesRequest): Promise<SuccessResponse>;
  JoinPublicCampaign(request: JoinPublicCampaignRequest): Promise<SuccessResponse>;
  LeaveCampaign(request: LeaveCampaignRequest): Promise<SuccessResponse>;
  MarkTaskAsCompleted(request: TaskCompletedResponse): Promise<SuccessResponse>;
}

export const CampaignServiceServiceName = "campaign.CampaignService";
export class CampaignServiceClientImpl implements CampaignService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CampaignServiceServiceName;
    this.rpc = rpc;
    this.CreateCampaign = this.CreateCampaign.bind(this);
    this.GetCampaignsByBrandId = this.GetCampaignsByBrandId.bind(this);
    this.GetCampaignById = this.GetCampaignById.bind(this);
    this.UpdateCampaign = this.UpdateCampaign.bind(this);
    this.UpdateCampaignTasks = this.UpdateCampaignTasks.bind(this);
    this.GetTasksByCampaignId = this.GetTasksByCampaignId.bind(this);
    this.DeleteCampaignById = this.DeleteCampaignById.bind(this);
    this.DeleteTaskById = this.DeleteTaskById.bind(this);
    this.AddProfileToCampaign = this.AddProfileToCampaign.bind(this);
    this.RemoveProfileFromCampaign = this.RemoveProfileFromCampaign.bind(this);
    this.JoinPublicCampaign = this.JoinPublicCampaign.bind(this);
    this.LeaveCampaign = this.LeaveCampaign.bind(this);
    this.MarkTaskAsCompleted = this.MarkTaskAsCompleted.bind(this);
  }
  CreateCampaign(request: CreateCampaignRequest): Promise<CampaignResponse> {
    const data = CreateCampaignRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateCampaign", data);
    return promise.then((data) => CampaignResponse.decode(new BinaryReader(data)));
  }

  GetCampaignsByBrandId(request: GetCampaignsByBrandIdRequest): Promise<GetCampaignsResponse> {
    const data = GetCampaignsByBrandIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCampaignsByBrandId", data);
    return promise.then((data) => GetCampaignsResponse.decode(new BinaryReader(data)));
  }

  GetCampaignById(request: CampaignsByIdRequest): Promise<CampaignResponse> {
    const data = CampaignsByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCampaignById", data);
    return promise.then((data) => CampaignResponse.decode(new BinaryReader(data)));
  }

  UpdateCampaign(request: UpdateCampaignRequest): Promise<CampaignResponse> {
    const data = UpdateCampaignRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateCampaign", data);
    return promise.then((data) => CampaignResponse.decode(new BinaryReader(data)));
  }

  UpdateCampaignTasks(request: UpdateTaskRequest): Promise<TaskResponse> {
    const data = UpdateTaskRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateCampaignTasks", data);
    return promise.then((data) => TaskResponse.decode(new BinaryReader(data)));
  }

  GetTasksByCampaignId(request: GetTasksByCampaignIdRequest): Promise<GetTasksResponse> {
    const data = GetTasksByCampaignIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTasksByCampaignId", data);
    return promise.then((data) => GetTasksResponse.decode(new BinaryReader(data)));
  }

  DeleteCampaignById(request: CampaignsByIdRequest): Promise<CampaignResponse> {
    const data = CampaignsByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteCampaignById", data);
    return promise.then((data) => CampaignResponse.decode(new BinaryReader(data)));
  }

  DeleteTaskById(request: DeleteTaskByIdRequest): Promise<TaskResponse> {
    const data = DeleteTaskByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteTaskById", data);
    return promise.then((data) => TaskResponse.decode(new BinaryReader(data)));
  }

  AddProfileToCampaign(request: UpdatePrivateCampaignProfilesRequest): Promise<SuccessResponse> {
    const data = UpdatePrivateCampaignProfilesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddProfileToCampaign", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }

  RemoveProfileFromCampaign(request: UpdatePrivateCampaignProfilesRequest): Promise<SuccessResponse> {
    const data = UpdatePrivateCampaignProfilesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveProfileFromCampaign", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }

  JoinPublicCampaign(request: JoinPublicCampaignRequest): Promise<SuccessResponse> {
    const data = JoinPublicCampaignRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "JoinPublicCampaign", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }

  LeaveCampaign(request: LeaveCampaignRequest): Promise<SuccessResponse> {
    const data = LeaveCampaignRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LeaveCampaign", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }

  MarkTaskAsCompleted(request: TaskCompletedResponse): Promise<SuccessResponse> {
    const data = TaskCompletedResponse.encode(request).finish();
    const promise = this.rpc.request(this.service, "MarkTaskAsCompleted", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
