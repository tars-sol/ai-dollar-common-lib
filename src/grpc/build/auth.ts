// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "auth";

export interface SuccessResponse {
  success: boolean;
}

export interface FollowRequest {
  roleId: string;
  followingId: string;
  role: string;
  userId: string;
  follow: boolean;
}

export interface RevokeTokenRequest {
  accessToken: string;
  refreshToken: string;
}

export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  isValid: boolean;
}

export interface RevokeTokenResponse {
  success: boolean;
}

export interface RegisterRequest {
  email: string;
  password: string;
  name: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface SsoLoginRequest {
  idToken: string;
  provider: string;
}

export interface WalletNonceRequest {
  wallet: string;
}

export interface WalletNonceResponse {
  walletNonce: string;
}

export interface WalletLoginRequest {
  walletAddress: string;
  signature: string;
  nonce: string;
}

export interface HealthResponse {
  isHealthy: boolean;
}

export interface LinkWalletRequest {
  userId: string;
  walletAddress: string;
  signature: string;
  nonce: string;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface UserRequest {
  id: string;
  email: string;
  walletAddress: string;
  role: string;
  roleId: string;
}

export interface AuthResponse {
  token: string;
  refreshToken: string;
  user: UserRequest | undefined;
}

export interface Topic {
  /** slug/ID (e.g., "lifestyle") */
  id: string;
  /** display label (e.g., "Lifestyle") */
  name: string;
}

export interface OnboardingTopicsResponse {
  topics: Topic[];
}

export interface SubmitOnboardingTopicsRequest {
  userId: string;
  /** e.g., ["technology","ai-ml","beginner-friendly"] */
  topicIds: string[];
}

function createBaseSuccessResponse(): SuccessResponse {
  return { success: false };
}

export const SuccessResponse: MessageFns<SuccessResponse> = {
  encode(message: SuccessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuccessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuccessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuccessResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: SuccessResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SuccessResponse>, I>>(base?: I): SuccessResponse {
    return SuccessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SuccessResponse>, I>>(object: I): SuccessResponse {
    const message = createBaseSuccessResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseFollowRequest(): FollowRequest {
  return { roleId: "", followingId: "", role: "", userId: "", follow: false };
}

export const FollowRequest: MessageFns<FollowRequest> = {
  encode(message: FollowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roleId !== "") {
      writer.uint32(10).string(message.roleId);
    }
    if (message.followingId !== "") {
      writer.uint32(18).string(message.followingId);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.userId !== "") {
      writer.uint32(42).string(message.userId);
    }
    if (message.follow !== false) {
      writer.uint32(32).bool(message.follow);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FollowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFollowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roleId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.followingId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.follow = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FollowRequest {
    return {
      roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
      followingId: isSet(object.followingId) ? globalThis.String(object.followingId) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      follow: isSet(object.follow) ? globalThis.Boolean(object.follow) : false,
    };
  },

  toJSON(message: FollowRequest): unknown {
    const obj: any = {};
    if (message.roleId !== "") {
      obj.roleId = message.roleId;
    }
    if (message.followingId !== "") {
      obj.followingId = message.followingId;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.follow !== false) {
      obj.follow = message.follow;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FollowRequest>, I>>(base?: I): FollowRequest {
    return FollowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FollowRequest>, I>>(object: I): FollowRequest {
    const message = createBaseFollowRequest();
    message.roleId = object.roleId ?? "";
    message.followingId = object.followingId ?? "";
    message.role = object.role ?? "";
    message.userId = object.userId ?? "";
    message.follow = object.follow ?? false;
    return message;
  },
};

function createBaseRevokeTokenRequest(): RevokeTokenRequest {
  return { accessToken: "", refreshToken: "" };
}

export const RevokeTokenRequest: MessageFns<RevokeTokenRequest> = {
  encode(message: RevokeTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(18).string(message.accessToken);
    }
    if (message.refreshToken !== "") {
      writer.uint32(10).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevokeTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevokeTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevokeTokenRequest {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: RevokeTokenRequest): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RevokeTokenRequest>, I>>(base?: I): RevokeTokenRequest {
    return RevokeTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RevokeTokenRequest>, I>>(object: I): RevokeTokenRequest {
    const message = createBaseRevokeTokenRequest();
    message.accessToken = object.accessToken ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseValidateTokenRequest(): ValidateTokenRequest {
  return { token: "" };
}

export const ValidateTokenRequest: MessageFns<ValidateTokenRequest> = {
  encode(message: ValidateTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTokenRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: ValidateTokenRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateTokenRequest>, I>>(base?: I): ValidateTokenRequest {
    return ValidateTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateTokenRequest>, I>>(object: I): ValidateTokenRequest {
    const message = createBaseValidateTokenRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseValidateTokenResponse(): ValidateTokenResponse {
  return { isValid: false };
}

export const ValidateTokenResponse: MessageFns<ValidateTokenResponse> = {
  encode(message: ValidateTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isValid !== false) {
      writer.uint32(8).bool(message.isValid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isValid = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateTokenResponse {
    return { isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false };
  },

  toJSON(message: ValidateTokenResponse): unknown {
    const obj: any = {};
    if (message.isValid !== false) {
      obj.isValid = message.isValid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateTokenResponse>, I>>(base?: I): ValidateTokenResponse {
    return ValidateTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateTokenResponse>, I>>(object: I): ValidateTokenResponse {
    const message = createBaseValidateTokenResponse();
    message.isValid = object.isValid ?? false;
    return message;
  },
};

function createBaseRevokeTokenResponse(): RevokeTokenResponse {
  return { success: false };
}

export const RevokeTokenResponse: MessageFns<RevokeTokenResponse> = {
  encode(message: RevokeTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevokeTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevokeTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevokeTokenResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: RevokeTokenResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RevokeTokenResponse>, I>>(base?: I): RevokeTokenResponse {
    return RevokeTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RevokeTokenResponse>, I>>(object: I): RevokeTokenResponse {
    const message = createBaseRevokeTokenResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseRegisterRequest(): RegisterRequest {
  return { email: "", password: "", name: "" };
}

export const RegisterRequest: MessageFns<RegisterRequest> = {
  encode(message: RegisterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: RegisterRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterRequest>, I>>(base?: I): RegisterRequest {
    return RegisterRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterRequest>, I>>(object: I): RegisterRequest {
    const message = createBaseRegisterRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLoginRequest(): LoginRequest {
  return { email: "", password: "" };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(message: LoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: LoginRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginRequest>, I>>(base?: I): LoginRequest {
    return LoginRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginRequest>, I>>(object: I): LoginRequest {
    const message = createBaseLoginRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSsoLoginRequest(): SsoLoginRequest {
  return { idToken: "", provider: "" };
}

export const SsoLoginRequest: MessageFns<SsoLoginRequest> = {
  encode(message: SsoLoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idToken !== "") {
      writer.uint32(10).string(message.idToken);
    }
    if (message.provider !== "") {
      writer.uint32(18).string(message.provider);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SsoLoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSsoLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.idToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.provider = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SsoLoginRequest {
    return {
      idToken: isSet(object.idToken) ? globalThis.String(object.idToken) : "",
      provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
    };
  },

  toJSON(message: SsoLoginRequest): unknown {
    const obj: any = {};
    if (message.idToken !== "") {
      obj.idToken = message.idToken;
    }
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SsoLoginRequest>, I>>(base?: I): SsoLoginRequest {
    return SsoLoginRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SsoLoginRequest>, I>>(object: I): SsoLoginRequest {
    const message = createBaseSsoLoginRequest();
    message.idToken = object.idToken ?? "";
    message.provider = object.provider ?? "";
    return message;
  },
};

function createBaseWalletNonceRequest(): WalletNonceRequest {
  return { wallet: "" };
}

export const WalletNonceRequest: MessageFns<WalletNonceRequest> = {
  encode(message: WalletNonceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.wallet !== "") {
      writer.uint32(10).string(message.wallet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WalletNonceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWalletNonceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wallet = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WalletNonceRequest {
    return { wallet: isSet(object.wallet) ? globalThis.String(object.wallet) : "" };
  },

  toJSON(message: WalletNonceRequest): unknown {
    const obj: any = {};
    if (message.wallet !== "") {
      obj.wallet = message.wallet;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WalletNonceRequest>, I>>(base?: I): WalletNonceRequest {
    return WalletNonceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WalletNonceRequest>, I>>(object: I): WalletNonceRequest {
    const message = createBaseWalletNonceRequest();
    message.wallet = object.wallet ?? "";
    return message;
  },
};

function createBaseWalletNonceResponse(): WalletNonceResponse {
  return { walletNonce: "" };
}

export const WalletNonceResponse: MessageFns<WalletNonceResponse> = {
  encode(message: WalletNonceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.walletNonce !== "") {
      writer.uint32(10).string(message.walletNonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WalletNonceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWalletNonceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.walletNonce = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WalletNonceResponse {
    return { walletNonce: isSet(object.walletNonce) ? globalThis.String(object.walletNonce) : "" };
  },

  toJSON(message: WalletNonceResponse): unknown {
    const obj: any = {};
    if (message.walletNonce !== "") {
      obj.walletNonce = message.walletNonce;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WalletNonceResponse>, I>>(base?: I): WalletNonceResponse {
    return WalletNonceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WalletNonceResponse>, I>>(object: I): WalletNonceResponse {
    const message = createBaseWalletNonceResponse();
    message.walletNonce = object.walletNonce ?? "";
    return message;
  },
};

function createBaseWalletLoginRequest(): WalletLoginRequest {
  return { walletAddress: "", signature: "", nonce: "" };
}

export const WalletLoginRequest: MessageFns<WalletLoginRequest> = {
  encode(message: WalletLoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.walletAddress !== "") {
      writer.uint32(10).string(message.walletAddress);
    }
    if (message.signature !== "") {
      writer.uint32(18).string(message.signature);
    }
    if (message.nonce !== "") {
      writer.uint32(26).string(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WalletLoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWalletLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.walletAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nonce = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WalletLoginRequest {
    return {
      walletAddress: isSet(object.walletAddress) ? globalThis.String(object.walletAddress) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
    };
  },

  toJSON(message: WalletLoginRequest): unknown {
    const obj: any = {};
    if (message.walletAddress !== "") {
      obj.walletAddress = message.walletAddress;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WalletLoginRequest>, I>>(base?: I): WalletLoginRequest {
    return WalletLoginRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WalletLoginRequest>, I>>(object: I): WalletLoginRequest {
    const message = createBaseWalletLoginRequest();
    message.walletAddress = object.walletAddress ?? "";
    message.signature = object.signature ?? "";
    message.nonce = object.nonce ?? "";
    return message;
  },
};

function createBaseHealthResponse(): HealthResponse {
  return { isHealthy: false };
}

export const HealthResponse: MessageFns<HealthResponse> = {
  encode(message: HealthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isHealthy !== false) {
      writer.uint32(8).bool(message.isHealthy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isHealthy = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthResponse {
    return { isHealthy: isSet(object.isHealthy) ? globalThis.Boolean(object.isHealthy) : false };
  },

  toJSON(message: HealthResponse): unknown {
    const obj: any = {};
    if (message.isHealthy !== false) {
      obj.isHealthy = message.isHealthy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthResponse>, I>>(base?: I): HealthResponse {
    return HealthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthResponse>, I>>(object: I): HealthResponse {
    const message = createBaseHealthResponse();
    message.isHealthy = object.isHealthy ?? false;
    return message;
  },
};

function createBaseLinkWalletRequest(): LinkWalletRequest {
  return { userId: "", walletAddress: "", signature: "", nonce: "" };
}

export const LinkWalletRequest: MessageFns<LinkWalletRequest> = {
  encode(message: LinkWalletRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.walletAddress !== "") {
      writer.uint32(18).string(message.walletAddress);
    }
    if (message.signature !== "") {
      writer.uint32(26).string(message.signature);
    }
    if (message.nonce !== "") {
      writer.uint32(34).string(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkWalletRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkWalletRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.walletAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nonce = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkWalletRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      walletAddress: isSet(object.walletAddress) ? globalThis.String(object.walletAddress) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
    };
  },

  toJSON(message: LinkWalletRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.walletAddress !== "") {
      obj.walletAddress = message.walletAddress;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkWalletRequest>, I>>(base?: I): LinkWalletRequest {
    return LinkWalletRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkWalletRequest>, I>>(object: I): LinkWalletRequest {
    const message = createBaseLinkWalletRequest();
    message.userId = object.userId ?? "";
    message.walletAddress = object.walletAddress ?? "";
    message.signature = object.signature ?? "";
    message.nonce = object.nonce ?? "";
    return message;
  },
};

function createBaseRefreshTokenRequest(): RefreshTokenRequest {
  return { refreshToken: "" };
}

export const RefreshTokenRequest: MessageFns<RefreshTokenRequest> = {
  encode(message: RefreshTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refreshToken !== "") {
      writer.uint32(10).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefreshTokenRequest {
    return { refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "" };
  },

  toJSON(message: RefreshTokenRequest): unknown {
    const obj: any = {};
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RefreshTokenRequest>, I>>(base?: I): RefreshTokenRequest {
    return RefreshTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefreshTokenRequest>, I>>(object: I): RefreshTokenRequest {
    const message = createBaseRefreshTokenRequest();
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseUserRequest(): UserRequest {
  return { id: "", email: "", walletAddress: "", role: "", roleId: "" };
}

export const UserRequest: MessageFns<UserRequest> = {
  encode(message: UserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.walletAddress !== "") {
      writer.uint32(26).string(message.walletAddress);
    }
    if (message.role !== "") {
      writer.uint32(34).string(message.role);
    }
    if (message.roleId !== "") {
      writer.uint32(42).string(message.roleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.walletAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.roleId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      walletAddress: isSet(object.walletAddress) ? globalThis.String(object.walletAddress) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
    };
  },

  toJSON(message: UserRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.walletAddress !== "") {
      obj.walletAddress = message.walletAddress;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.roleId !== "") {
      obj.roleId = message.roleId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserRequest>, I>>(base?: I): UserRequest {
    return UserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserRequest>, I>>(object: I): UserRequest {
    const message = createBaseUserRequest();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.walletAddress = object.walletAddress ?? "";
    message.role = object.role ?? "";
    message.roleId = object.roleId ?? "";
    return message;
  },
};

function createBaseAuthResponse(): AuthResponse {
  return { token: "", refreshToken: "", user: undefined };
}

export const AuthResponse: MessageFns<AuthResponse> = {
  encode(message: AuthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    if (message.user !== undefined) {
      UserRequest.encode(message.user, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = UserRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthResponse {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
      user: isSet(object.user) ? UserRequest.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: AuthResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    if (message.user !== undefined) {
      obj.user = UserRequest.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthResponse>, I>>(base?: I): AuthResponse {
    return AuthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthResponse>, I>>(object: I): AuthResponse {
    const message = createBaseAuthResponse();
    message.token = object.token ?? "";
    message.refreshToken = object.refreshToken ?? "";
    message.user = (object.user !== undefined && object.user !== null)
      ? UserRequest.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseTopic(): Topic {
  return { id: "", name: "" };
}

export const Topic: MessageFns<Topic> = {
  encode(message: Topic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Topic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Topic {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Topic): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Topic>, I>>(base?: I): Topic {
    return Topic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Topic>, I>>(object: I): Topic {
    const message = createBaseTopic();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOnboardingTopicsResponse(): OnboardingTopicsResponse {
  return { topics: [] };
}

export const OnboardingTopicsResponse: MessageFns<OnboardingTopicsResponse> = {
  encode(message: OnboardingTopicsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.topics) {
      Topic.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnboardingTopicsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnboardingTopicsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.topics.push(Topic.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnboardingTopicsResponse {
    return { topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e: any) => Topic.fromJSON(e)) : [] };
  },

  toJSON(message: OnboardingTopicsResponse): unknown {
    const obj: any = {};
    if (message.topics?.length) {
      obj.topics = message.topics.map((e) => Topic.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnboardingTopicsResponse>, I>>(base?: I): OnboardingTopicsResponse {
    return OnboardingTopicsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnboardingTopicsResponse>, I>>(object: I): OnboardingTopicsResponse {
    const message = createBaseOnboardingTopicsResponse();
    message.topics = object.topics?.map((e) => Topic.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSubmitOnboardingTopicsRequest(): SubmitOnboardingTopicsRequest {
  return { userId: "", topicIds: [] };
}

export const SubmitOnboardingTopicsRequest: MessageFns<SubmitOnboardingTopicsRequest> = {
  encode(message: SubmitOnboardingTopicsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.topicIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitOnboardingTopicsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitOnboardingTopicsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.topicIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitOnboardingTopicsRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      topicIds: globalThis.Array.isArray(object?.topicIds) ? object.topicIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SubmitOnboardingTopicsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.topicIds?.length) {
      obj.topicIds = message.topicIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitOnboardingTopicsRequest>, I>>(base?: I): SubmitOnboardingTopicsRequest {
    return SubmitOnboardingTopicsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitOnboardingTopicsRequest>, I>>(
    object: I,
  ): SubmitOnboardingTopicsRequest {
    const message = createBaseSubmitOnboardingTopicsRequest();
    message.userId = object.userId ?? "";
    message.topicIds = object.topicIds?.map((e) => e) || [];
    return message;
  },
};

export interface AuthService {
  Register(request: RegisterRequest): Promise<AuthResponse>;
  Login(request: LoginRequest): Promise<AuthResponse>;
  SsoLogin(request: SsoLoginRequest): Promise<AuthResponse>;
  WalletNonce(request: WalletNonceRequest): Promise<WalletNonceResponse>;
  WalletLogin(request: WalletLoginRequest): Promise<AuthResponse>;
  LinkWallet(request: LinkWalletRequest): Promise<AuthResponse>;
  RefreshToken(request: RefreshTokenRequest): Promise<AuthResponse>;
  RevokeToken(request: RevokeTokenRequest): Promise<RevokeTokenResponse>;
  ValidateToken(request: ValidateTokenRequest): Promise<ValidateTokenResponse>;
  Health(request: Empty): Promise<HealthResponse>;
  FollowUser(request: FollowRequest): Promise<SuccessResponse>;
  ListOnboardingTopics(request: Empty): Promise<OnboardingTopicsResponse>;
  SubmitOnboardingTopics(request: SubmitOnboardingTopicsRequest): Promise<SuccessResponse>;
}

export const AuthServiceServiceName = "auth.AuthService";
export class AuthServiceClientImpl implements AuthService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AuthServiceServiceName;
    this.rpc = rpc;
    this.Register = this.Register.bind(this);
    this.Login = this.Login.bind(this);
    this.SsoLogin = this.SsoLogin.bind(this);
    this.WalletNonce = this.WalletNonce.bind(this);
    this.WalletLogin = this.WalletLogin.bind(this);
    this.LinkWallet = this.LinkWallet.bind(this);
    this.RefreshToken = this.RefreshToken.bind(this);
    this.RevokeToken = this.RevokeToken.bind(this);
    this.ValidateToken = this.ValidateToken.bind(this);
    this.Health = this.Health.bind(this);
    this.FollowUser = this.FollowUser.bind(this);
    this.ListOnboardingTopics = this.ListOnboardingTopics.bind(this);
    this.SubmitOnboardingTopics = this.SubmitOnboardingTopics.bind(this);
  }
  Register(request: RegisterRequest): Promise<AuthResponse> {
    const data = RegisterRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Register", data);
    return promise.then((data) => AuthResponse.decode(new BinaryReader(data)));
  }

  Login(request: LoginRequest): Promise<AuthResponse> {
    const data = LoginRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Login", data);
    return promise.then((data) => AuthResponse.decode(new BinaryReader(data)));
  }

  SsoLogin(request: SsoLoginRequest): Promise<AuthResponse> {
    const data = SsoLoginRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SsoLogin", data);
    return promise.then((data) => AuthResponse.decode(new BinaryReader(data)));
  }

  WalletNonce(request: WalletNonceRequest): Promise<WalletNonceResponse> {
    const data = WalletNonceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "WalletNonce", data);
    return promise.then((data) => WalletNonceResponse.decode(new BinaryReader(data)));
  }

  WalletLogin(request: WalletLoginRequest): Promise<AuthResponse> {
    const data = WalletLoginRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "WalletLogin", data);
    return promise.then((data) => AuthResponse.decode(new BinaryReader(data)));
  }

  LinkWallet(request: LinkWalletRequest): Promise<AuthResponse> {
    const data = LinkWalletRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LinkWallet", data);
    return promise.then((data) => AuthResponse.decode(new BinaryReader(data)));
  }

  RefreshToken(request: RefreshTokenRequest): Promise<AuthResponse> {
    const data = RefreshTokenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RefreshToken", data);
    return promise.then((data) => AuthResponse.decode(new BinaryReader(data)));
  }

  RevokeToken(request: RevokeTokenRequest): Promise<RevokeTokenResponse> {
    const data = RevokeTokenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RevokeToken", data);
    return promise.then((data) => RevokeTokenResponse.decode(new BinaryReader(data)));
  }

  ValidateToken(request: ValidateTokenRequest): Promise<ValidateTokenResponse> {
    const data = ValidateTokenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ValidateToken", data);
    return promise.then((data) => ValidateTokenResponse.decode(new BinaryReader(data)));
  }

  Health(request: Empty): Promise<HealthResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "Health", data);
    return promise.then((data) => HealthResponse.decode(new BinaryReader(data)));
  }

  FollowUser(request: FollowRequest): Promise<SuccessResponse> {
    const data = FollowRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FollowUser", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }

  ListOnboardingTopics(request: Empty): Promise<OnboardingTopicsResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListOnboardingTopics", data);
    return promise.then((data) => OnboardingTopicsResponse.decode(new BinaryReader(data)));
  }

  SubmitOnboardingTopics(request: SubmitOnboardingTopicsRequest): Promise<SuccessResponse> {
    const data = SubmitOnboardingTopicsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitOnboardingTopics", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
