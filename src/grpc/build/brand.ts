// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: brand.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "brand";

export interface BrandByIdRequest {
  brandId: string;
  /** ID of the user making the request (for auth, if needed) */
  userId: string;
}

/** Response shape (same for both create and update) */
export interface BrandResponse {
  id: string;
  userId: string;
  name: string;
  description: string;
  logoUrl: string;
  websiteUrl: string;
  createdAt: string;
  updatedAt: string;
  jwtToken?: string | undefined;
  refreshToken?: string | undefined;
  followersCount: string;
  followingCount: string;
  tags: string[];
  campaignCount: string;
  tokenName: string;
  discord: string;
  twitter: string;
  telegram: string;
  isFollowing?: boolean | undefined;
  username: string;
}

/** Request for creating a brand (userId comes from JWT in server) */
export interface CreateBrandRequest {
  userId: string;
  name: string;
  description?: string | undefined;
  logoUrl?: string | undefined;
  websiteUrl?: string | undefined;
  tags: string[];
  discord?: string | undefined;
  twitter?: string | undefined;
  telegram?: string | undefined;
  tokenName?: string | undefined;
  username: string;
}

/** Request for updating a brand */
export interface UpdateBrandRequest {
  userId: string;
  name?: string | undefined;
  description?: string | undefined;
  logoUrl?: string | undefined;
  websiteUrl?: string | undefined;
  tags: string[];
  discord?: string | undefined;
  twitter?: string | undefined;
  telegram?: string | undefined;
  tokenName?: string | undefined;
  username?: string | undefined;
}

export interface SearchBrandsRequest {
  q: string;
  page: number;
  limit: number;
}

export interface BrandSearchItem {
  id: string;
  name: string;
  logoUrl: string;
  createdAt: string;
  score: number;
}

export interface SearchBrandsResponse {
  results: BrandSearchItem[];
  total: number;
}

function createBaseBrandByIdRequest(): BrandByIdRequest {
  return { brandId: "", userId: "" };
}

export const BrandByIdRequest: MessageFns<BrandByIdRequest> = {
  encode(message: BrandByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.brandId !== "") {
      writer.uint32(10).string(message.brandId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrandByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BrandByIdRequest {
    return {
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: BrandByIdRequest): unknown {
    const obj: any = {};
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BrandByIdRequest>, I>>(base?: I): BrandByIdRequest {
    return BrandByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BrandByIdRequest>, I>>(object: I): BrandByIdRequest {
    const message = createBaseBrandByIdRequest();
    message.brandId = object.brandId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseBrandResponse(): BrandResponse {
  return {
    id: "",
    userId: "",
    name: "",
    description: "",
    logoUrl: "",
    websiteUrl: "",
    createdAt: "",
    updatedAt: "",
    jwtToken: undefined,
    refreshToken: undefined,
    followersCount: "",
    followingCount: "",
    tags: [],
    campaignCount: "",
    tokenName: "",
    discord: "",
    twitter: "",
    telegram: "",
    isFollowing: undefined,
    username: "",
  };
}

export const BrandResponse: MessageFns<BrandResponse> = {
  encode(message: BrandResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.logoUrl !== "") {
      writer.uint32(42).string(message.logoUrl);
    }
    if (message.websiteUrl !== "") {
      writer.uint32(50).string(message.websiteUrl);
    }
    if (message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    if (message.jwtToken !== undefined) {
      writer.uint32(74).string(message.jwtToken);
    }
    if (message.refreshToken !== undefined) {
      writer.uint32(82).string(message.refreshToken);
    }
    if (message.followersCount !== "") {
      writer.uint32(90).string(message.followersCount);
    }
    if (message.followingCount !== "") {
      writer.uint32(98).string(message.followingCount);
    }
    for (const v of message.tags) {
      writer.uint32(106).string(v!);
    }
    if (message.campaignCount !== "") {
      writer.uint32(114).string(message.campaignCount);
    }
    if (message.tokenName !== "") {
      writer.uint32(122).string(message.tokenName);
    }
    if (message.discord !== "") {
      writer.uint32(130).string(message.discord);
    }
    if (message.twitter !== "") {
      writer.uint32(138).string(message.twitter);
    }
    if (message.telegram !== "") {
      writer.uint32(146).string(message.telegram);
    }
    if (message.isFollowing !== undefined) {
      writer.uint32(152).bool(message.isFollowing);
    }
    if (message.username !== "") {
      writer.uint32(162).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrandResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.jwtToken = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.followersCount = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.followingCount = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.campaignCount = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.tokenName = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.discord = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.telegram = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.isFollowing = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BrandResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : "",
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      jwtToken: isSet(object.jwtToken) ? globalThis.String(object.jwtToken) : undefined,
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : undefined,
      followersCount: isSet(object.followersCount) ? globalThis.String(object.followersCount) : "",
      followingCount: isSet(object.followingCount) ? globalThis.String(object.followingCount) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      campaignCount: isSet(object.campaignCount) ? globalThis.String(object.campaignCount) : "",
      tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : "",
      discord: isSet(object.discord) ? globalThis.String(object.discord) : "",
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
      telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : "",
      isFollowing: isSet(object.isFollowing) ? globalThis.Boolean(object.isFollowing) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: BrandResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.logoUrl !== "") {
      obj.logoUrl = message.logoUrl;
    }
    if (message.websiteUrl !== "") {
      obj.websiteUrl = message.websiteUrl;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.jwtToken !== undefined) {
      obj.jwtToken = message.jwtToken;
    }
    if (message.refreshToken !== undefined) {
      obj.refreshToken = message.refreshToken;
    }
    if (message.followersCount !== "") {
      obj.followersCount = message.followersCount;
    }
    if (message.followingCount !== "") {
      obj.followingCount = message.followingCount;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.campaignCount !== "") {
      obj.campaignCount = message.campaignCount;
    }
    if (message.tokenName !== "") {
      obj.tokenName = message.tokenName;
    }
    if (message.discord !== "") {
      obj.discord = message.discord;
    }
    if (message.twitter !== "") {
      obj.twitter = message.twitter;
    }
    if (message.telegram !== "") {
      obj.telegram = message.telegram;
    }
    if (message.isFollowing !== undefined) {
      obj.isFollowing = message.isFollowing;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BrandResponse>, I>>(base?: I): BrandResponse {
    return BrandResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BrandResponse>, I>>(object: I): BrandResponse {
    const message = createBaseBrandResponse();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.logoUrl = object.logoUrl ?? "";
    message.websiteUrl = object.websiteUrl ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.jwtToken = object.jwtToken ?? undefined;
    message.refreshToken = object.refreshToken ?? undefined;
    message.followersCount = object.followersCount ?? "";
    message.followingCount = object.followingCount ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.campaignCount = object.campaignCount ?? "";
    message.tokenName = object.tokenName ?? "";
    message.discord = object.discord ?? "";
    message.twitter = object.twitter ?? "";
    message.telegram = object.telegram ?? "";
    message.isFollowing = object.isFollowing ?? undefined;
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseCreateBrandRequest(): CreateBrandRequest {
  return {
    userId: "",
    name: "",
    description: undefined,
    logoUrl: undefined,
    websiteUrl: undefined,
    tags: [],
    discord: undefined,
    twitter: undefined,
    telegram: undefined,
    tokenName: undefined,
    username: "",
  };
}

export const CreateBrandRequest: MessageFns<CreateBrandRequest> = {
  encode(message: CreateBrandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.logoUrl !== undefined) {
      writer.uint32(34).string(message.logoUrl);
    }
    if (message.websiteUrl !== undefined) {
      writer.uint32(42).string(message.websiteUrl);
    }
    for (const v of message.tags) {
      writer.uint32(50).string(v!);
    }
    if (message.discord !== undefined) {
      writer.uint32(58).string(message.discord);
    }
    if (message.twitter !== undefined) {
      writer.uint32(66).string(message.twitter);
    }
    if (message.telegram !== undefined) {
      writer.uint32(74).string(message.telegram);
    }
    if (message.tokenName !== undefined) {
      writer.uint32(82).string(message.tokenName);
    }
    if (message.username !== "") {
      writer.uint32(90).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBrandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.discord = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.telegram = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.tokenName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBrandRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      discord: isSet(object.discord) ? globalThis.String(object.discord) : undefined,
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : undefined,
      telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : undefined,
      tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: CreateBrandRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.logoUrl !== undefined) {
      obj.logoUrl = message.logoUrl;
    }
    if (message.websiteUrl !== undefined) {
      obj.websiteUrl = message.websiteUrl;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.discord !== undefined) {
      obj.discord = message.discord;
    }
    if (message.twitter !== undefined) {
      obj.twitter = message.twitter;
    }
    if (message.telegram !== undefined) {
      obj.telegram = message.telegram;
    }
    if (message.tokenName !== undefined) {
      obj.tokenName = message.tokenName;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBrandRequest>, I>>(base?: I): CreateBrandRequest {
    return CreateBrandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBrandRequest>, I>>(object: I): CreateBrandRequest {
    const message = createBaseCreateBrandRequest();
    message.userId = object.userId ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? undefined;
    message.logoUrl = object.logoUrl ?? undefined;
    message.websiteUrl = object.websiteUrl ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.discord = object.discord ?? undefined;
    message.twitter = object.twitter ?? undefined;
    message.telegram = object.telegram ?? undefined;
    message.tokenName = object.tokenName ?? undefined;
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseUpdateBrandRequest(): UpdateBrandRequest {
  return {
    userId: "",
    name: undefined,
    description: undefined,
    logoUrl: undefined,
    websiteUrl: undefined,
    tags: [],
    discord: undefined,
    twitter: undefined,
    telegram: undefined,
    tokenName: undefined,
    username: undefined,
  };
}

export const UpdateBrandRequest: MessageFns<UpdateBrandRequest> = {
  encode(message: UpdateBrandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.logoUrl !== undefined) {
      writer.uint32(34).string(message.logoUrl);
    }
    if (message.websiteUrl !== undefined) {
      writer.uint32(42).string(message.websiteUrl);
    }
    for (const v of message.tags) {
      writer.uint32(50).string(v!);
    }
    if (message.discord !== undefined) {
      writer.uint32(58).string(message.discord);
    }
    if (message.twitter !== undefined) {
      writer.uint32(66).string(message.twitter);
    }
    if (message.telegram !== undefined) {
      writer.uint32(74).string(message.telegram);
    }
    if (message.tokenName !== undefined) {
      writer.uint32(82).string(message.tokenName);
    }
    if (message.username !== undefined) {
      writer.uint32(90).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBrandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.discord = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.telegram = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.tokenName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBrandRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      discord: isSet(object.discord) ? globalThis.String(object.discord) : undefined,
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : undefined,
      telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : undefined,
      tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : undefined,
    };
  },

  toJSON(message: UpdateBrandRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.logoUrl !== undefined) {
      obj.logoUrl = message.logoUrl;
    }
    if (message.websiteUrl !== undefined) {
      obj.websiteUrl = message.websiteUrl;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.discord !== undefined) {
      obj.discord = message.discord;
    }
    if (message.twitter !== undefined) {
      obj.twitter = message.twitter;
    }
    if (message.telegram !== undefined) {
      obj.telegram = message.telegram;
    }
    if (message.tokenName !== undefined) {
      obj.tokenName = message.tokenName;
    }
    if (message.username !== undefined) {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBrandRequest>, I>>(base?: I): UpdateBrandRequest {
    return UpdateBrandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBrandRequest>, I>>(object: I): UpdateBrandRequest {
    const message = createBaseUpdateBrandRequest();
    message.userId = object.userId ?? "";
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.logoUrl = object.logoUrl ?? undefined;
    message.websiteUrl = object.websiteUrl ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.discord = object.discord ?? undefined;
    message.twitter = object.twitter ?? undefined;
    message.telegram = object.telegram ?? undefined;
    message.tokenName = object.tokenName ?? undefined;
    message.username = object.username ?? undefined;
    return message;
  },
};

function createBaseSearchBrandsRequest(): SearchBrandsRequest {
  return { q: "", page: 0, limit: 0 };
}

export const SearchBrandsRequest: MessageFns<SearchBrandsRequest> = {
  encode(message: SearchBrandsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.q !== "") {
      writer.uint32(10).string(message.q);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchBrandsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchBrandsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.q = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchBrandsRequest {
    return {
      q: isSet(object.q) ? globalThis.String(object.q) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: SearchBrandsRequest): unknown {
    const obj: any = {};
    if (message.q !== "") {
      obj.q = message.q;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchBrandsRequest>, I>>(base?: I): SearchBrandsRequest {
    return SearchBrandsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchBrandsRequest>, I>>(object: I): SearchBrandsRequest {
    const message = createBaseSearchBrandsRequest();
    message.q = object.q ?? "";
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseBrandSearchItem(): BrandSearchItem {
  return { id: "", name: "", logoUrl: "", createdAt: "", score: 0 };
}

export const BrandSearchItem: MessageFns<BrandSearchItem> = {
  encode(message: BrandSearchItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.logoUrl !== "") {
      writer.uint32(26).string(message.logoUrl);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.score !== 0) {
      writer.uint32(41).double(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrandSearchItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandSearchItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.score = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BrandSearchItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
    };
  },

  toJSON(message: BrandSearchItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.logoUrl !== "") {
      obj.logoUrl = message.logoUrl;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.score !== 0) {
      obj.score = message.score;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BrandSearchItem>, I>>(base?: I): BrandSearchItem {
    return BrandSearchItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BrandSearchItem>, I>>(object: I): BrandSearchItem {
    const message = createBaseBrandSearchItem();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.logoUrl = object.logoUrl ?? "";
    message.createdAt = object.createdAt ?? "";
    message.score = object.score ?? 0;
    return message;
  },
};

function createBaseSearchBrandsResponse(): SearchBrandsResponse {
  return { results: [], total: 0 };
}

export const SearchBrandsResponse: MessageFns<SearchBrandsResponse> = {
  encode(message: SearchBrandsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      BrandSearchItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchBrandsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchBrandsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.results.push(BrandSearchItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchBrandsResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => BrandSearchItem.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: SearchBrandsResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => BrandSearchItem.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchBrandsResponse>, I>>(base?: I): SearchBrandsResponse {
    return SearchBrandsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchBrandsResponse>, I>>(object: I): SearchBrandsResponse {
    const message = createBaseSearchBrandsResponse();
    message.results = object.results?.map((e) => BrandSearchItem.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

/** gRPC Brand Service */
export interface BrandService {
  Create(request: CreateBrandRequest): Promise<BrandResponse>;
  Update(request: UpdateBrandRequest): Promise<BrandResponse>;
  GetBrandById(request: BrandByIdRequest): Promise<BrandResponse>;
  SearchBrands(request: SearchBrandsRequest): Promise<SearchBrandsResponse>;
}

export const BrandServiceServiceName = "brand.BrandService";
export class BrandServiceClientImpl implements BrandService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || BrandServiceServiceName;
    this.rpc = rpc;
    this.Create = this.Create.bind(this);
    this.Update = this.Update.bind(this);
    this.GetBrandById = this.GetBrandById.bind(this);
    this.SearchBrands = this.SearchBrands.bind(this);
  }
  Create(request: CreateBrandRequest): Promise<BrandResponse> {
    const data = CreateBrandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Create", data);
    return promise.then((data) => BrandResponse.decode(new BinaryReader(data)));
  }

  Update(request: UpdateBrandRequest): Promise<BrandResponse> {
    const data = UpdateBrandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => BrandResponse.decode(new BinaryReader(data)));
  }

  GetBrandById(request: BrandByIdRequest): Promise<BrandResponse> {
    const data = BrandByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBrandById", data);
    return promise.then((data) => BrandResponse.decode(new BinaryReader(data)));
  }

  SearchBrands(request: SearchBrandsRequest): Promise<SearchBrandsResponse> {
    const data = SearchBrandsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SearchBrands", data);
    return promise.then((data) => SearchBrandsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
