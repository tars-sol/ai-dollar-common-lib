// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: payment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "payment";

export interface PayoutRequest {
  brandId: string;
  campaignId: string;
  payoutAmounts: PayoutAmount[];
  isEqual: boolean;
}

export interface PayoutAmount {
  profileId: string;
  amount?: string | undefined;
}

export interface SuccessResponse {
  success: boolean;
}

export interface CreatePaymentIntentRequest {
  brandId: string;
  campaignId: string;
}

export interface PaymentIntentResponse {
  clientSecretKey?: string | undefined;
}

export interface PaymentIntentEvent {
  id: string;
  amountReceived: string;
  currency: string;
  status: string;
  clientSecret?: string | undefined;
  eventType: string;
  brandId: string;
}

export interface StripeResponse {
  success: boolean;
  message: string;
}

export interface ConnectedAccountRequest {
  email: string;
  profileId: string;
}

export interface ConnectAccountResponse {
  accountId: string;
  email: string;
  isActive: boolean;
  onBoardingUrl: string;
}

function createBasePayoutRequest(): PayoutRequest {
  return { brandId: "", campaignId: "", payoutAmounts: [], isEqual: false };
}

export const PayoutRequest: MessageFns<PayoutRequest> = {
  encode(message: PayoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.brandId !== "") {
      writer.uint32(10).string(message.brandId);
    }
    if (message.campaignId !== "") {
      writer.uint32(18).string(message.campaignId);
    }
    for (const v of message.payoutAmounts) {
      PayoutAmount.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.isEqual !== false) {
      writer.uint32(32).bool(message.isEqual);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PayoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payoutAmounts.push(PayoutAmount.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isEqual = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PayoutRequest {
    return {
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      payoutAmounts: globalThis.Array.isArray(object?.payoutAmounts)
        ? object.payoutAmounts.map((e: any) => PayoutAmount.fromJSON(e))
        : [],
      isEqual: isSet(object.isEqual) ? globalThis.Boolean(object.isEqual) : false,
    };
  },

  toJSON(message: PayoutRequest): unknown {
    const obj: any = {};
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.payoutAmounts?.length) {
      obj.payoutAmounts = message.payoutAmounts.map((e) => PayoutAmount.toJSON(e));
    }
    if (message.isEqual !== false) {
      obj.isEqual = message.isEqual;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PayoutRequest>, I>>(base?: I): PayoutRequest {
    return PayoutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PayoutRequest>, I>>(object: I): PayoutRequest {
    const message = createBasePayoutRequest();
    message.brandId = object.brandId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.payoutAmounts = object.payoutAmounts?.map((e) => PayoutAmount.fromPartial(e)) || [];
    message.isEqual = object.isEqual ?? false;
    return message;
  },
};

function createBasePayoutAmount(): PayoutAmount {
  return { profileId: "", amount: undefined };
}

export const PayoutAmount: MessageFns<PayoutAmount> = {
  encode(message: PayoutAmount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profileId !== "") {
      writer.uint32(10).string(message.profileId);
    }
    if (message.amount !== undefined) {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PayoutAmount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayoutAmount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profileId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PayoutAmount {
    return {
      profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : undefined,
    };
  },

  toJSON(message: PayoutAmount): unknown {
    const obj: any = {};
    if (message.profileId !== "") {
      obj.profileId = message.profileId;
    }
    if (message.amount !== undefined) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PayoutAmount>, I>>(base?: I): PayoutAmount {
    return PayoutAmount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PayoutAmount>, I>>(object: I): PayoutAmount {
    const message = createBasePayoutAmount();
    message.profileId = object.profileId ?? "";
    message.amount = object.amount ?? undefined;
    return message;
  },
};

function createBaseSuccessResponse(): SuccessResponse {
  return { success: false };
}

export const SuccessResponse: MessageFns<SuccessResponse> = {
  encode(message: SuccessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuccessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuccessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuccessResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: SuccessResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SuccessResponse>, I>>(base?: I): SuccessResponse {
    return SuccessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SuccessResponse>, I>>(object: I): SuccessResponse {
    const message = createBaseSuccessResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCreatePaymentIntentRequest(): CreatePaymentIntentRequest {
  return { brandId: "", campaignId: "" };
}

export const CreatePaymentIntentRequest: MessageFns<CreatePaymentIntentRequest> = {
  encode(message: CreatePaymentIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.brandId !== "") {
      writer.uint32(18).string(message.brandId);
    }
    if (message.campaignId !== "") {
      writer.uint32(26).string(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePaymentIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePaymentIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePaymentIntentRequest {
    return {
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
    };
  },

  toJSON(message: CreatePaymentIntentRequest): unknown {
    const obj: any = {};
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePaymentIntentRequest>, I>>(base?: I): CreatePaymentIntentRequest {
    return CreatePaymentIntentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePaymentIntentRequest>, I>>(object: I): CreatePaymentIntentRequest {
    const message = createBaseCreatePaymentIntentRequest();
    message.brandId = object.brandId ?? "";
    message.campaignId = object.campaignId ?? "";
    return message;
  },
};

function createBasePaymentIntentResponse(): PaymentIntentResponse {
  return { clientSecretKey: undefined };
}

export const PaymentIntentResponse: MessageFns<PaymentIntentResponse> = {
  encode(message: PaymentIntentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientSecretKey !== undefined) {
      writer.uint32(10).string(message.clientSecretKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentIntentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentIntentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientSecretKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentIntentResponse {
    return { clientSecretKey: isSet(object.clientSecretKey) ? globalThis.String(object.clientSecretKey) : undefined };
  },

  toJSON(message: PaymentIntentResponse): unknown {
    const obj: any = {};
    if (message.clientSecretKey !== undefined) {
      obj.clientSecretKey = message.clientSecretKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentIntentResponse>, I>>(base?: I): PaymentIntentResponse {
    return PaymentIntentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentIntentResponse>, I>>(object: I): PaymentIntentResponse {
    const message = createBasePaymentIntentResponse();
    message.clientSecretKey = object.clientSecretKey ?? undefined;
    return message;
  },
};

function createBasePaymentIntentEvent(): PaymentIntentEvent {
  return { id: "", amountReceived: "", currency: "", status: "", clientSecret: undefined, eventType: "", brandId: "" };
}

export const PaymentIntentEvent: MessageFns<PaymentIntentEvent> = {
  encode(message: PaymentIntentEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.amountReceived !== "") {
      writer.uint32(26).string(message.amountReceived);
    }
    if (message.currency !== "") {
      writer.uint32(34).string(message.currency);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.clientSecret !== undefined) {
      writer.uint32(50).string(message.clientSecret);
    }
    if (message.eventType !== "") {
      writer.uint32(58).string(message.eventType);
    }
    if (message.brandId !== "") {
      writer.uint32(18).string(message.brandId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentIntentEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentIntentEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amountReceived = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.brandId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentIntentEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      amountReceived: isSet(object.amountReceived) ? globalThis.String(object.amountReceived) : "",
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : undefined,
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
    };
  },

  toJSON(message: PaymentIntentEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.amountReceived !== "") {
      obj.amountReceived = message.amountReceived;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.clientSecret !== undefined) {
      obj.clientSecret = message.clientSecret;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.brandId !== "") {
      obj.brandId = message.brandId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentIntentEvent>, I>>(base?: I): PaymentIntentEvent {
    return PaymentIntentEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentIntentEvent>, I>>(object: I): PaymentIntentEvent {
    const message = createBasePaymentIntentEvent();
    message.id = object.id ?? "";
    message.amountReceived = object.amountReceived ?? "";
    message.currency = object.currency ?? "";
    message.status = object.status ?? "";
    message.clientSecret = object.clientSecret ?? undefined;
    message.eventType = object.eventType ?? "";
    message.brandId = object.brandId ?? "";
    return message;
  },
};

function createBaseStripeResponse(): StripeResponse {
  return { success: false, message: "" };
}

export const StripeResponse: MessageFns<StripeResponse> = {
  encode(message: StripeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StripeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStripeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StripeResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: StripeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StripeResponse>, I>>(base?: I): StripeResponse {
    return StripeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StripeResponse>, I>>(object: I): StripeResponse {
    const message = createBaseStripeResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseConnectedAccountRequest(): ConnectedAccountRequest {
  return { email: "", profileId: "" };
}

export const ConnectedAccountRequest: MessageFns<ConnectedAccountRequest> = {
  encode(message: ConnectedAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.profileId !== "") {
      writer.uint32(18).string(message.profileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectedAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectedAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profileId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectedAccountRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
    };
  },

  toJSON(message: ConnectedAccountRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.profileId !== "") {
      obj.profileId = message.profileId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectedAccountRequest>, I>>(base?: I): ConnectedAccountRequest {
    return ConnectedAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectedAccountRequest>, I>>(object: I): ConnectedAccountRequest {
    const message = createBaseConnectedAccountRequest();
    message.email = object.email ?? "";
    message.profileId = object.profileId ?? "";
    return message;
  },
};

function createBaseConnectAccountResponse(): ConnectAccountResponse {
  return { accountId: "", email: "", isActive: false, onBoardingUrl: "" };
}

export const ConnectAccountResponse: MessageFns<ConnectAccountResponse> = {
  encode(message: ConnectAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.isActive !== false) {
      writer.uint32(24).bool(message.isActive);
    }
    if (message.onBoardingUrl !== "") {
      writer.uint32(34).string(message.onBoardingUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.onBoardingUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectAccountResponse {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      onBoardingUrl: isSet(object.onBoardingUrl) ? globalThis.String(object.onBoardingUrl) : "",
    };
  },

  toJSON(message: ConnectAccountResponse): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.onBoardingUrl !== "") {
      obj.onBoardingUrl = message.onBoardingUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectAccountResponse>, I>>(base?: I): ConnectAccountResponse {
    return ConnectAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectAccountResponse>, I>>(object: I): ConnectAccountResponse {
    const message = createBaseConnectAccountResponse();
    message.accountId = object.accountId ?? "";
    message.email = object.email ?? "";
    message.isActive = object.isActive ?? false;
    message.onBoardingUrl = object.onBoardingUrl ?? "";
    return message;
  },
};

export interface PaymentService {
  CreatePaymentIntent(request: CreatePaymentIntentRequest): Promise<PaymentIntentResponse>;
  HandlePaymentIntent(request: PaymentIntentEvent): Promise<StripeResponse>;
  CreateConnectedAccount(request: ConnectedAccountRequest): Promise<ConnectAccountResponse>;
  GetConnectedAccount(request: ConnectedAccountRequest): Promise<ConnectAccountResponse>;
  SendPayout(request: PayoutRequest): Promise<SuccessResponse>;
  test(request: SuccessResponse): Promise<SuccessResponse>;
}

export const PaymentServiceServiceName = "payment.PaymentService";
export class PaymentServiceClientImpl implements PaymentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PaymentServiceServiceName;
    this.rpc = rpc;
    this.CreatePaymentIntent = this.CreatePaymentIntent.bind(this);
    this.HandlePaymentIntent = this.HandlePaymentIntent.bind(this);
    this.CreateConnectedAccount = this.CreateConnectedAccount.bind(this);
    this.GetConnectedAccount = this.GetConnectedAccount.bind(this);
    this.SendPayout = this.SendPayout.bind(this);
    this.test = this.test.bind(this);
  }
  CreatePaymentIntent(request: CreatePaymentIntentRequest): Promise<PaymentIntentResponse> {
    const data = CreatePaymentIntentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreatePaymentIntent", data);
    return promise.then((data) => PaymentIntentResponse.decode(new BinaryReader(data)));
  }

  HandlePaymentIntent(request: PaymentIntentEvent): Promise<StripeResponse> {
    const data = PaymentIntentEvent.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandlePaymentIntent", data);
    return promise.then((data) => StripeResponse.decode(new BinaryReader(data)));
  }

  CreateConnectedAccount(request: ConnectedAccountRequest): Promise<ConnectAccountResponse> {
    const data = ConnectedAccountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateConnectedAccount", data);
    return promise.then((data) => ConnectAccountResponse.decode(new BinaryReader(data)));
  }

  GetConnectedAccount(request: ConnectedAccountRequest): Promise<ConnectAccountResponse> {
    const data = ConnectedAccountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetConnectedAccount", data);
    return promise.then((data) => ConnectAccountResponse.decode(new BinaryReader(data)));
  }

  SendPayout(request: PayoutRequest): Promise<SuccessResponse> {
    const data = PayoutRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendPayout", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }

  test(request: SuccessResponse): Promise<SuccessResponse> {
    const data = SuccessResponse.encode(request).finish();
    const promise = this.rpc.request(this.service, "test", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
