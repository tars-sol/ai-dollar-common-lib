// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: post.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "post";

export interface CreatePostRequest {
  userId: string;
  caption: string;
  accessType: string;
  priceInCents?: number | undefined;
  s3Key: string;
  fileType: string;
  originalFileName?: string | undefined;
}

export interface UpdatePostRequest {
  id: string;
  userId: string;
  caption?:
    | string
    | undefined;
  /** "PUBLIC", "SUBSCRIBER", "PAID" */
  accessType?: string | undefined;
  priceInCents?: number | undefined;
}

export interface GetPostsByIdsRequest {
  ids: string[];
}

export interface GetPostsByIdsResponse {
  posts: PostResponse[];
}

export interface GenerateUploadUrlRequest {
  userId: string;
  fileName: string;
  contentType: string;
}

export interface GenerateUploadUrlResponse {
  uploadUrl: string;
  key: string;
}

export interface PostResponse {
  id: string;
  userId: string;
  caption: string;
  /** "PUBLIC", "SUBSCRIBER", "PAID" */
  accessType: string;
  priceInCents?: number | undefined;
  s3Key: string;
  /** "IMAGE", "VIDEO", "CODE", "OTHER" */
  fileType: string;
  originalFileName: string;
  createdAt: string;
  updatedAt: string;
}

function createBaseCreatePostRequest(): CreatePostRequest {
  return {
    userId: "",
    caption: "",
    accessType: "",
    priceInCents: undefined,
    s3Key: "",
    fileType: "",
    originalFileName: undefined,
  };
}

export const CreatePostRequest: MessageFns<CreatePostRequest> = {
  encode(message: CreatePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.caption !== "") {
      writer.uint32(18).string(message.caption);
    }
    if (message.accessType !== "") {
      writer.uint32(26).string(message.accessType);
    }
    if (message.priceInCents !== undefined) {
      writer.uint32(32).int32(message.priceInCents);
    }
    if (message.s3Key !== "") {
      writer.uint32(42).string(message.s3Key);
    }
    if (message.fileType !== "") {
      writer.uint32(50).string(message.fileType);
    }
    if (message.originalFileName !== undefined) {
      writer.uint32(58).string(message.originalFileName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accessType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.priceInCents = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.s3Key = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fileType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.originalFileName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePostRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      caption: isSet(object.caption) ? globalThis.String(object.caption) : "",
      accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : "",
      priceInCents: isSet(object.priceInCents) ? globalThis.Number(object.priceInCents) : undefined,
      s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : "",
      fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
      originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : undefined,
    };
  },

  toJSON(message: CreatePostRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.caption !== "") {
      obj.caption = message.caption;
    }
    if (message.accessType !== "") {
      obj.accessType = message.accessType;
    }
    if (message.priceInCents !== undefined) {
      obj.priceInCents = Math.round(message.priceInCents);
    }
    if (message.s3Key !== "") {
      obj.s3Key = message.s3Key;
    }
    if (message.fileType !== "") {
      obj.fileType = message.fileType;
    }
    if (message.originalFileName !== undefined) {
      obj.originalFileName = message.originalFileName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePostRequest>, I>>(base?: I): CreatePostRequest {
    return CreatePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePostRequest>, I>>(object: I): CreatePostRequest {
    const message = createBaseCreatePostRequest();
    message.userId = object.userId ?? "";
    message.caption = object.caption ?? "";
    message.accessType = object.accessType ?? "";
    message.priceInCents = object.priceInCents ?? undefined;
    message.s3Key = object.s3Key ?? "";
    message.fileType = object.fileType ?? "";
    message.originalFileName = object.originalFileName ?? undefined;
    return message;
  },
};

function createBaseUpdatePostRequest(): UpdatePostRequest {
  return { id: "", userId: "", caption: undefined, accessType: undefined, priceInCents: undefined };
}

export const UpdatePostRequest: MessageFns<UpdatePostRequest> = {
  encode(message: UpdatePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.caption !== undefined) {
      writer.uint32(26).string(message.caption);
    }
    if (message.accessType !== undefined) {
      writer.uint32(34).string(message.accessType);
    }
    if (message.priceInCents !== undefined) {
      writer.uint32(40).int32(message.priceInCents);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.accessType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.priceInCents = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePostRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : undefined,
      priceInCents: isSet(object.priceInCents) ? globalThis.Number(object.priceInCents) : undefined,
    };
  },

  toJSON(message: UpdatePostRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.accessType !== undefined) {
      obj.accessType = message.accessType;
    }
    if (message.priceInCents !== undefined) {
      obj.priceInCents = Math.round(message.priceInCents);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePostRequest>, I>>(base?: I): UpdatePostRequest {
    return UpdatePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePostRequest>, I>>(object: I): UpdatePostRequest {
    const message = createBaseUpdatePostRequest();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.caption = object.caption ?? undefined;
    message.accessType = object.accessType ?? undefined;
    message.priceInCents = object.priceInCents ?? undefined;
    return message;
  },
};

function createBaseGetPostsByIdsRequest(): GetPostsByIdsRequest {
  return { ids: [] };
}

export const GetPostsByIdsRequest: MessageFns<GetPostsByIdsRequest> = {
  encode(message: GetPostsByIdsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ids) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPostsByIdsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPostsByIdsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ids.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPostsByIdsRequest {
    return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: GetPostsByIdsRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPostsByIdsRequest>, I>>(base?: I): GetPostsByIdsRequest {
    return GetPostsByIdsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPostsByIdsRequest>, I>>(object: I): GetPostsByIdsRequest {
    const message = createBaseGetPostsByIdsRequest();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetPostsByIdsResponse(): GetPostsByIdsResponse {
  return { posts: [] };
}

export const GetPostsByIdsResponse: MessageFns<GetPostsByIdsResponse> = {
  encode(message: GetPostsByIdsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.posts) {
      PostResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPostsByIdsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPostsByIdsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.posts.push(PostResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPostsByIdsResponse {
    return {
      posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e: any) => PostResponse.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetPostsByIdsResponse): unknown {
    const obj: any = {};
    if (message.posts?.length) {
      obj.posts = message.posts.map((e) => PostResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPostsByIdsResponse>, I>>(base?: I): GetPostsByIdsResponse {
    return GetPostsByIdsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPostsByIdsResponse>, I>>(object: I): GetPostsByIdsResponse {
    const message = createBaseGetPostsByIdsResponse();
    message.posts = object.posts?.map((e) => PostResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGenerateUploadUrlRequest(): GenerateUploadUrlRequest {
  return { userId: "", fileName: "", contentType: "" };
}

export const GenerateUploadUrlRequest: MessageFns<GenerateUploadUrlRequest> = {
  encode(message: GenerateUploadUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.fileName !== "") {
      writer.uint32(18).string(message.fileName);
    }
    if (message.contentType !== "") {
      writer.uint32(26).string(message.contentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateUploadUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateUploadUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateUploadUrlRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
    };
  },

  toJSON(message: GenerateUploadUrlRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateUploadUrlRequest>, I>>(base?: I): GenerateUploadUrlRequest {
    return GenerateUploadUrlRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateUploadUrlRequest>, I>>(object: I): GenerateUploadUrlRequest {
    const message = createBaseGenerateUploadUrlRequest();
    message.userId = object.userId ?? "";
    message.fileName = object.fileName ?? "";
    message.contentType = object.contentType ?? "";
    return message;
  },
};

function createBaseGenerateUploadUrlResponse(): GenerateUploadUrlResponse {
  return { uploadUrl: "", key: "" };
}

export const GenerateUploadUrlResponse: MessageFns<GenerateUploadUrlResponse> = {
  encode(message: GenerateUploadUrlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadUrl !== "") {
      writer.uint32(10).string(message.uploadUrl);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateUploadUrlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateUploadUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uploadUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateUploadUrlResponse {
    return {
      uploadUrl: isSet(object.uploadUrl) ? globalThis.String(object.uploadUrl) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: GenerateUploadUrlResponse): unknown {
    const obj: any = {};
    if (message.uploadUrl !== "") {
      obj.uploadUrl = message.uploadUrl;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateUploadUrlResponse>, I>>(base?: I): GenerateUploadUrlResponse {
    return GenerateUploadUrlResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateUploadUrlResponse>, I>>(object: I): GenerateUploadUrlResponse {
    const message = createBaseGenerateUploadUrlResponse();
    message.uploadUrl = object.uploadUrl ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBasePostResponse(): PostResponse {
  return {
    id: "",
    userId: "",
    caption: "",
    accessType: "",
    priceInCents: undefined,
    s3Key: "",
    fileType: "",
    originalFileName: "",
    createdAt: "",
    updatedAt: "",
  };
}

export const PostResponse: MessageFns<PostResponse> = {
  encode(message: PostResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.caption !== "") {
      writer.uint32(26).string(message.caption);
    }
    if (message.accessType !== "") {
      writer.uint32(34).string(message.accessType);
    }
    if (message.priceInCents !== undefined) {
      writer.uint32(40).int32(message.priceInCents);
    }
    if (message.s3Key !== "") {
      writer.uint32(50).string(message.s3Key);
    }
    if (message.fileType !== "") {
      writer.uint32(58).string(message.fileType);
    }
    if (message.originalFileName !== "") {
      writer.uint32(66).string(message.originalFileName);
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(82).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.accessType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.priceInCents = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.s3Key = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fileType = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.originalFileName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      caption: isSet(object.caption) ? globalThis.String(object.caption) : "",
      accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : "",
      priceInCents: isSet(object.priceInCents) ? globalThis.Number(object.priceInCents) : undefined,
      s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : "",
      fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
      originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: PostResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.caption !== "") {
      obj.caption = message.caption;
    }
    if (message.accessType !== "") {
      obj.accessType = message.accessType;
    }
    if (message.priceInCents !== undefined) {
      obj.priceInCents = Math.round(message.priceInCents);
    }
    if (message.s3Key !== "") {
      obj.s3Key = message.s3Key;
    }
    if (message.fileType !== "") {
      obj.fileType = message.fileType;
    }
    if (message.originalFileName !== "") {
      obj.originalFileName = message.originalFileName;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostResponse>, I>>(base?: I): PostResponse {
    return PostResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostResponse>, I>>(object: I): PostResponse {
    const message = createBasePostResponse();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.caption = object.caption ?? "";
    message.accessType = object.accessType ?? "";
    message.priceInCents = object.priceInCents ?? undefined;
    message.s3Key = object.s3Key ?? "";
    message.fileType = object.fileType ?? "";
    message.originalFileName = object.originalFileName ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

export interface PostService {
  Create(request: CreatePostRequest): Promise<PostResponse>;
  Update(request: UpdatePostRequest): Promise<PostResponse>;
  GetPostsByIds(request: GetPostsByIdsRequest): Promise<GetPostsByIdsResponse>;
  GenerateUploadUrl(request: GenerateUploadUrlRequest): Promise<GenerateUploadUrlResponse>;
}

export const PostServiceServiceName = "post.PostService";
export class PostServiceClientImpl implements PostService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PostServiceServiceName;
    this.rpc = rpc;
    this.Create = this.Create.bind(this);
    this.Update = this.Update.bind(this);
    this.GetPostsByIds = this.GetPostsByIds.bind(this);
    this.GenerateUploadUrl = this.GenerateUploadUrl.bind(this);
  }
  Create(request: CreatePostRequest): Promise<PostResponse> {
    const data = CreatePostRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Create", data);
    return promise.then((data) => PostResponse.decode(new BinaryReader(data)));
  }

  Update(request: UpdatePostRequest): Promise<PostResponse> {
    const data = UpdatePostRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => PostResponse.decode(new BinaryReader(data)));
  }

  GetPostsByIds(request: GetPostsByIdsRequest): Promise<GetPostsByIdsResponse> {
    const data = GetPostsByIdsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPostsByIds", data);
    return promise.then((data) => GetPostsByIdsResponse.decode(new BinaryReader(data)));
  }

  GenerateUploadUrl(request: GenerateUploadUrlRequest): Promise<GenerateUploadUrlResponse> {
    const data = GenerateUploadUrlRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GenerateUploadUrl", data);
    return promise.then((data) => GenerateUploadUrlResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
