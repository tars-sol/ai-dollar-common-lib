// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: post.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "post";

export interface CreatePostRequest {
  userId: string;
  caption: string;
  accessType: string;
  postType: string;
  mimeType?: string | undefined;
  mediaType?: string | undefined;
  s3Key?: string | undefined;
  fileType?: string | undefined;
  originalFileName?: string | undefined;
  pollEndTime?: string | undefined;
  options: string[];
}

export interface UpdatePostRequest {
  id: string;
  userId: string;
  caption?:
    | string
    | undefined;
  /** "PUBLIC", "SUBSCRIBER", "PAID" */
  accessType?: string | undefined;
}

export interface GenerateUploadUrlRequest {
  userId: string;
  fileName: string;
  contentType: string;
}

export interface GenerateUploadUrlResponse {
  uploadUrl: string;
  key: string;
}

export interface GetFeedRequest {
  userId: string;
  page: number;
  perPage: number;
}

export interface GetFeedResponse {
  posts: PostResponse[];
}

export interface PostMediaResponse {
  id: string;
  mimeType: string;
  mediaType: string;
  s3Key: string;
  originalFileName: string;
  signedUrl: string;
}

export interface PostFileResponse {
  id: string;
  mimeType: string;
  s3Key: string;
  originalFileName: string;
  signedUrl: string;
  fileType: string;
  sizeInBytes: string;
}

export interface VoteOnPollRequest {
  userId: string;
  postId: string;
  optionId: string;
}

export interface PostPollResponse {
  id: string;
  pollEndTime: string;
  postPollOptions: PostPollOptionResponse[];
}

export interface PostPollOptionResponse {
  id: string;
  text: string;
  voteCount: string;
}

export interface PostResponse {
  id: string;
  userId: string;
  caption: string;
  accessType: string;
  postType: string;
  postMedia?: PostMediaResponse | undefined;
  postPoll?: PostPollResponse | undefined;
  postFile?: PostFileResponse | undefined;
  createdAt: string;
  updatedAt: string;
}

function createBaseCreatePostRequest(): CreatePostRequest {
  return {
    userId: "",
    caption: "",
    accessType: "",
    postType: "",
    mimeType: undefined,
    mediaType: undefined,
    s3Key: undefined,
    fileType: undefined,
    originalFileName: undefined,
    pollEndTime: undefined,
    options: [],
  };
}

export const CreatePostRequest: MessageFns<CreatePostRequest> = {
  encode(message: CreatePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.caption !== "") {
      writer.uint32(18).string(message.caption);
    }
    if (message.accessType !== "") {
      writer.uint32(26).string(message.accessType);
    }
    if (message.postType !== "") {
      writer.uint32(66).string(message.postType);
    }
    if (message.mimeType !== undefined) {
      writer.uint32(34).string(message.mimeType);
    }
    if (message.mediaType !== undefined) {
      writer.uint32(74).string(message.mediaType);
    }
    if (message.s3Key !== undefined) {
      writer.uint32(42).string(message.s3Key);
    }
    if (message.fileType !== undefined) {
      writer.uint32(50).string(message.fileType);
    }
    if (message.originalFileName !== undefined) {
      writer.uint32(58).string(message.originalFileName);
    }
    if (message.pollEndTime !== undefined) {
      writer.uint32(82).string(message.pollEndTime);
    }
    for (const v of message.options) {
      writer.uint32(90).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accessType = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.postType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.mediaType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.s3Key = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fileType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.originalFileName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.pollEndTime = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.options.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePostRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      caption: isSet(object.caption) ? globalThis.String(object.caption) : "",
      accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : "",
      postType: isSet(object.postType) ? globalThis.String(object.postType) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : undefined,
      mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : undefined,
      s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : undefined,
      fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : undefined,
      originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : undefined,
      pollEndTime: isSet(object.pollEndTime) ? globalThis.String(object.pollEndTime) : undefined,
      options: globalThis.Array.isArray(object?.options) ? object.options.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: CreatePostRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.caption !== "") {
      obj.caption = message.caption;
    }
    if (message.accessType !== "") {
      obj.accessType = message.accessType;
    }
    if (message.postType !== "") {
      obj.postType = message.postType;
    }
    if (message.mimeType !== undefined) {
      obj.mimeType = message.mimeType;
    }
    if (message.mediaType !== undefined) {
      obj.mediaType = message.mediaType;
    }
    if (message.s3Key !== undefined) {
      obj.s3Key = message.s3Key;
    }
    if (message.fileType !== undefined) {
      obj.fileType = message.fileType;
    }
    if (message.originalFileName !== undefined) {
      obj.originalFileName = message.originalFileName;
    }
    if (message.pollEndTime !== undefined) {
      obj.pollEndTime = message.pollEndTime;
    }
    if (message.options?.length) {
      obj.options = message.options;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePostRequest>, I>>(base?: I): CreatePostRequest {
    return CreatePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePostRequest>, I>>(object: I): CreatePostRequest {
    const message = createBaseCreatePostRequest();
    message.userId = object.userId ?? "";
    message.caption = object.caption ?? "";
    message.accessType = object.accessType ?? "";
    message.postType = object.postType ?? "";
    message.mimeType = object.mimeType ?? undefined;
    message.mediaType = object.mediaType ?? undefined;
    message.s3Key = object.s3Key ?? undefined;
    message.fileType = object.fileType ?? undefined;
    message.originalFileName = object.originalFileName ?? undefined;
    message.pollEndTime = object.pollEndTime ?? undefined;
    message.options = object.options?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdatePostRequest(): UpdatePostRequest {
  return { id: "", userId: "", caption: undefined, accessType: undefined };
}

export const UpdatePostRequest: MessageFns<UpdatePostRequest> = {
  encode(message: UpdatePostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.caption !== undefined) {
      writer.uint32(26).string(message.caption);
    }
    if (message.accessType !== undefined) {
      writer.uint32(34).string(message.accessType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.accessType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePostRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : undefined,
    };
  },

  toJSON(message: UpdatePostRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.accessType !== undefined) {
      obj.accessType = message.accessType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePostRequest>, I>>(base?: I): UpdatePostRequest {
    return UpdatePostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePostRequest>, I>>(object: I): UpdatePostRequest {
    const message = createBaseUpdatePostRequest();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.caption = object.caption ?? undefined;
    message.accessType = object.accessType ?? undefined;
    return message;
  },
};

function createBaseGenerateUploadUrlRequest(): GenerateUploadUrlRequest {
  return { userId: "", fileName: "", contentType: "" };
}

export const GenerateUploadUrlRequest: MessageFns<GenerateUploadUrlRequest> = {
  encode(message: GenerateUploadUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.fileName !== "") {
      writer.uint32(18).string(message.fileName);
    }
    if (message.contentType !== "") {
      writer.uint32(26).string(message.contentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateUploadUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateUploadUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateUploadUrlRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
    };
  },

  toJSON(message: GenerateUploadUrlRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateUploadUrlRequest>, I>>(base?: I): GenerateUploadUrlRequest {
    return GenerateUploadUrlRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateUploadUrlRequest>, I>>(object: I): GenerateUploadUrlRequest {
    const message = createBaseGenerateUploadUrlRequest();
    message.userId = object.userId ?? "";
    message.fileName = object.fileName ?? "";
    message.contentType = object.contentType ?? "";
    return message;
  },
};

function createBaseGenerateUploadUrlResponse(): GenerateUploadUrlResponse {
  return { uploadUrl: "", key: "" };
}

export const GenerateUploadUrlResponse: MessageFns<GenerateUploadUrlResponse> = {
  encode(message: GenerateUploadUrlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadUrl !== "") {
      writer.uint32(10).string(message.uploadUrl);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateUploadUrlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateUploadUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uploadUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateUploadUrlResponse {
    return {
      uploadUrl: isSet(object.uploadUrl) ? globalThis.String(object.uploadUrl) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: GenerateUploadUrlResponse): unknown {
    const obj: any = {};
    if (message.uploadUrl !== "") {
      obj.uploadUrl = message.uploadUrl;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateUploadUrlResponse>, I>>(base?: I): GenerateUploadUrlResponse {
    return GenerateUploadUrlResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateUploadUrlResponse>, I>>(object: I): GenerateUploadUrlResponse {
    const message = createBaseGenerateUploadUrlResponse();
    message.uploadUrl = object.uploadUrl ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseGetFeedRequest(): GetFeedRequest {
  return { userId: "", page: 0, perPage: 0 };
}

export const GetFeedRequest: MessageFns<GetFeedRequest> = {
  encode(message: GetFeedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.page !== 0) {
      writer.uint32(16).uint32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(24).uint32(message.perPage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.perPage = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeedRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
    };
  },

  toJSON(message: GetFeedRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFeedRequest>, I>>(base?: I): GetFeedRequest {
    return GetFeedRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFeedRequest>, I>>(object: I): GetFeedRequest {
    const message = createBaseGetFeedRequest();
    message.userId = object.userId ?? "";
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    return message;
  },
};

function createBaseGetFeedResponse(): GetFeedResponse {
  return { posts: [] };
}

export const GetFeedResponse: MessageFns<GetFeedResponse> = {
  encode(message: GetFeedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.posts) {
      PostResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.posts.push(PostResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeedResponse {
    return {
      posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e: any) => PostResponse.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetFeedResponse): unknown {
    const obj: any = {};
    if (message.posts?.length) {
      obj.posts = message.posts.map((e) => PostResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFeedResponse>, I>>(base?: I): GetFeedResponse {
    return GetFeedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFeedResponse>, I>>(object: I): GetFeedResponse {
    const message = createBaseGetFeedResponse();
    message.posts = object.posts?.map((e) => PostResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBasePostMediaResponse(): PostMediaResponse {
  return { id: "", mimeType: "", mediaType: "", s3Key: "", originalFileName: "", signedUrl: "" };
}

export const PostMediaResponse: MessageFns<PostMediaResponse> = {
  encode(message: PostMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(50).string(message.id);
    }
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    if (message.mediaType !== "") {
      writer.uint32(18).string(message.mediaType);
    }
    if (message.s3Key !== "") {
      writer.uint32(26).string(message.s3Key);
    }
    if (message.originalFileName !== "") {
      writer.uint32(34).string(message.originalFileName);
    }
    if (message.signedUrl !== "") {
      writer.uint32(42).string(message.signedUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mediaType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.s3Key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.originalFileName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.signedUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostMediaResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : "",
      s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : "",
      originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : "",
      signedUrl: isSet(object.signedUrl) ? globalThis.String(object.signedUrl) : "",
    };
  },

  toJSON(message: PostMediaResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.mediaType !== "") {
      obj.mediaType = message.mediaType;
    }
    if (message.s3Key !== "") {
      obj.s3Key = message.s3Key;
    }
    if (message.originalFileName !== "") {
      obj.originalFileName = message.originalFileName;
    }
    if (message.signedUrl !== "") {
      obj.signedUrl = message.signedUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostMediaResponse>, I>>(base?: I): PostMediaResponse {
    return PostMediaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostMediaResponse>, I>>(object: I): PostMediaResponse {
    const message = createBasePostMediaResponse();
    message.id = object.id ?? "";
    message.mimeType = object.mimeType ?? "";
    message.mediaType = object.mediaType ?? "";
    message.s3Key = object.s3Key ?? "";
    message.originalFileName = object.originalFileName ?? "";
    message.signedUrl = object.signedUrl ?? "";
    return message;
  },
};

function createBasePostFileResponse(): PostFileResponse {
  return { id: "", mimeType: "", s3Key: "", originalFileName: "", signedUrl: "", fileType: "", sizeInBytes: "" };
}

export const PostFileResponse: MessageFns<PostFileResponse> = {
  encode(message: PostFileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(50).string(message.id);
    }
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    if (message.s3Key !== "") {
      writer.uint32(26).string(message.s3Key);
    }
    if (message.originalFileName !== "") {
      writer.uint32(34).string(message.originalFileName);
    }
    if (message.signedUrl !== "") {
      writer.uint32(42).string(message.signedUrl);
    }
    if (message.fileType !== "") {
      writer.uint32(58).string(message.fileType);
    }
    if (message.sizeInBytes !== "") {
      writer.uint32(66).string(message.sizeInBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostFileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostFileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.s3Key = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.originalFileName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.signedUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fileType = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.sizeInBytes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostFileResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : "",
      originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : "",
      signedUrl: isSet(object.signedUrl) ? globalThis.String(object.signedUrl) : "",
      fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
      sizeInBytes: isSet(object.sizeInBytes) ? globalThis.String(object.sizeInBytes) : "",
    };
  },

  toJSON(message: PostFileResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.s3Key !== "") {
      obj.s3Key = message.s3Key;
    }
    if (message.originalFileName !== "") {
      obj.originalFileName = message.originalFileName;
    }
    if (message.signedUrl !== "") {
      obj.signedUrl = message.signedUrl;
    }
    if (message.fileType !== "") {
      obj.fileType = message.fileType;
    }
    if (message.sizeInBytes !== "") {
      obj.sizeInBytes = message.sizeInBytes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostFileResponse>, I>>(base?: I): PostFileResponse {
    return PostFileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostFileResponse>, I>>(object: I): PostFileResponse {
    const message = createBasePostFileResponse();
    message.id = object.id ?? "";
    message.mimeType = object.mimeType ?? "";
    message.s3Key = object.s3Key ?? "";
    message.originalFileName = object.originalFileName ?? "";
    message.signedUrl = object.signedUrl ?? "";
    message.fileType = object.fileType ?? "";
    message.sizeInBytes = object.sizeInBytes ?? "";
    return message;
  },
};

function createBaseVoteOnPollRequest(): VoteOnPollRequest {
  return { userId: "", postId: "", optionId: "" };
}

export const VoteOnPollRequest: MessageFns<VoteOnPollRequest> = {
  encode(message: VoteOnPollRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.postId !== "") {
      writer.uint32(18).string(message.postId);
    }
    if (message.optionId !== "") {
      writer.uint32(26).string(message.optionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VoteOnPollRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteOnPollRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.postId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.optionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoteOnPollRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
      optionId: isSet(object.optionId) ? globalThis.String(object.optionId) : "",
    };
  },

  toJSON(message: VoteOnPollRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.postId !== "") {
      obj.postId = message.postId;
    }
    if (message.optionId !== "") {
      obj.optionId = message.optionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoteOnPollRequest>, I>>(base?: I): VoteOnPollRequest {
    return VoteOnPollRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoteOnPollRequest>, I>>(object: I): VoteOnPollRequest {
    const message = createBaseVoteOnPollRequest();
    message.userId = object.userId ?? "";
    message.postId = object.postId ?? "";
    message.optionId = object.optionId ?? "";
    return message;
  },
};

function createBasePostPollResponse(): PostPollResponse {
  return { id: "", pollEndTime: "", postPollOptions: [] };
}

export const PostPollResponse: MessageFns<PostPollResponse> = {
  encode(message: PostPollResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.pollEndTime !== "") {
      writer.uint32(18).string(message.pollEndTime);
    }
    for (const v of message.postPollOptions) {
      PostPollOptionResponse.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostPollResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostPollResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pollEndTime = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.postPollOptions.push(PostPollOptionResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostPollResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      pollEndTime: isSet(object.pollEndTime) ? globalThis.String(object.pollEndTime) : "",
      postPollOptions: globalThis.Array.isArray(object?.postPollOptions)
        ? object.postPollOptions.map((e: any) => PostPollOptionResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PostPollResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.pollEndTime !== "") {
      obj.pollEndTime = message.pollEndTime;
    }
    if (message.postPollOptions?.length) {
      obj.postPollOptions = message.postPollOptions.map((e) => PostPollOptionResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostPollResponse>, I>>(base?: I): PostPollResponse {
    return PostPollResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostPollResponse>, I>>(object: I): PostPollResponse {
    const message = createBasePostPollResponse();
    message.id = object.id ?? "";
    message.pollEndTime = object.pollEndTime ?? "";
    message.postPollOptions = object.postPollOptions?.map((e) => PostPollOptionResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBasePostPollOptionResponse(): PostPollOptionResponse {
  return { id: "", text: "", voteCount: "" };
}

export const PostPollOptionResponse: MessageFns<PostPollOptionResponse> = {
  encode(message: PostPollOptionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.voteCount !== "") {
      writer.uint32(26).string(message.voteCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostPollOptionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostPollOptionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.voteCount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostPollOptionResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      voteCount: isSet(object.voteCount) ? globalThis.String(object.voteCount) : "",
    };
  },

  toJSON(message: PostPollOptionResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.voteCount !== "") {
      obj.voteCount = message.voteCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostPollOptionResponse>, I>>(base?: I): PostPollOptionResponse {
    return PostPollOptionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostPollOptionResponse>, I>>(object: I): PostPollOptionResponse {
    const message = createBasePostPollOptionResponse();
    message.id = object.id ?? "";
    message.text = object.text ?? "";
    message.voteCount = object.voteCount ?? "";
    return message;
  },
};

function createBasePostResponse(): PostResponse {
  return {
    id: "",
    userId: "",
    caption: "",
    accessType: "",
    postType: "",
    postMedia: undefined,
    postPoll: undefined,
    postFile: undefined,
    createdAt: "",
    updatedAt: "",
  };
}

export const PostResponse: MessageFns<PostResponse> = {
  encode(message: PostResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.caption !== "") {
      writer.uint32(26).string(message.caption);
    }
    if (message.accessType !== "") {
      writer.uint32(34).string(message.accessType);
    }
    if (message.postType !== "") {
      writer.uint32(42).string(message.postType);
    }
    if (message.postMedia !== undefined) {
      PostMediaResponse.encode(message.postMedia, writer.uint32(50).fork()).join();
    }
    if (message.postPoll !== undefined) {
      PostPollResponse.encode(message.postPoll, writer.uint32(58).fork()).join();
    }
    if (message.postFile !== undefined) {
      PostFileResponse.encode(message.postFile, writer.uint32(66).fork()).join();
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(82).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.accessType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.postType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.postMedia = PostMediaResponse.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.postPoll = PostPollResponse.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.postFile = PostFileResponse.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      caption: isSet(object.caption) ? globalThis.String(object.caption) : "",
      accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : "",
      postType: isSet(object.postType) ? globalThis.String(object.postType) : "",
      postMedia: isSet(object.postMedia) ? PostMediaResponse.fromJSON(object.postMedia) : undefined,
      postPoll: isSet(object.postPoll) ? PostPollResponse.fromJSON(object.postPoll) : undefined,
      postFile: isSet(object.postFile) ? PostFileResponse.fromJSON(object.postFile) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: PostResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.caption !== "") {
      obj.caption = message.caption;
    }
    if (message.accessType !== "") {
      obj.accessType = message.accessType;
    }
    if (message.postType !== "") {
      obj.postType = message.postType;
    }
    if (message.postMedia !== undefined) {
      obj.postMedia = PostMediaResponse.toJSON(message.postMedia);
    }
    if (message.postPoll !== undefined) {
      obj.postPoll = PostPollResponse.toJSON(message.postPoll);
    }
    if (message.postFile !== undefined) {
      obj.postFile = PostFileResponse.toJSON(message.postFile);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostResponse>, I>>(base?: I): PostResponse {
    return PostResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostResponse>, I>>(object: I): PostResponse {
    const message = createBasePostResponse();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.caption = object.caption ?? "";
    message.accessType = object.accessType ?? "";
    message.postType = object.postType ?? "";
    message.postMedia = (object.postMedia !== undefined && object.postMedia !== null)
      ? PostMediaResponse.fromPartial(object.postMedia)
      : undefined;
    message.postPoll = (object.postPoll !== undefined && object.postPoll !== null)
      ? PostPollResponse.fromPartial(object.postPoll)
      : undefined;
    message.postFile = (object.postFile !== undefined && object.postFile !== null)
      ? PostFileResponse.fromPartial(object.postFile)
      : undefined;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

export interface PostService {
  Create(request: CreatePostRequest): Promise<PostResponse>;
  Update(request: UpdatePostRequest): Promise<PostResponse>;
  GenerateUploadUrl(request: GenerateUploadUrlRequest): Promise<GenerateUploadUrlResponse>;
  GetFeed(request: GetFeedRequest): Promise<GetFeedResponse>;
  VoteOnPoll(request: VoteOnPollRequest): Promise<PostResponse>;
}

export const PostServiceServiceName = "post.PostService";
export class PostServiceClientImpl implements PostService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PostServiceServiceName;
    this.rpc = rpc;
    this.Create = this.Create.bind(this);
    this.Update = this.Update.bind(this);
    this.GenerateUploadUrl = this.GenerateUploadUrl.bind(this);
    this.GetFeed = this.GetFeed.bind(this);
    this.VoteOnPoll = this.VoteOnPoll.bind(this);
  }
  Create(request: CreatePostRequest): Promise<PostResponse> {
    const data = CreatePostRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Create", data);
    return promise.then((data) => PostResponse.decode(new BinaryReader(data)));
  }

  Update(request: UpdatePostRequest): Promise<PostResponse> {
    const data = UpdatePostRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => PostResponse.decode(new BinaryReader(data)));
  }

  GenerateUploadUrl(request: GenerateUploadUrlRequest): Promise<GenerateUploadUrlResponse> {
    const data = GenerateUploadUrlRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GenerateUploadUrl", data);
    return promise.then((data) => GenerateUploadUrlResponse.decode(new BinaryReader(data)));
  }

  GetFeed(request: GetFeedRequest): Promise<GetFeedResponse> {
    const data = GetFeedRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetFeed", data);
    return promise.then((data) => GetFeedResponse.decode(new BinaryReader(data)));
  }

  VoteOnPoll(request: VoteOnPollRequest): Promise<PostResponse> {
    const data = VoteOnPollRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "VoteOnPoll", data);
    return promise.then((data) => PostResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
