"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: auth.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthServiceClientImpl = exports.AuthServiceServiceName = exports.AuthResponse = exports.UserRequest = exports.RefreshTokenRequest = exports.LinkWalletRequest = exports.HealthResponse = exports.WalletLoginRequest = exports.WalletNonceResponse = exports.WalletNonceRequest = exports.SsoLoginRequest = exports.LoginRequest = exports.RegisterRequest = exports.RevokeTokenResponse = exports.ValidateTokenResponse = exports.ValidateTokenRequest = exports.RevokeTokenRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const empty_1 = require("./google/protobuf/empty");
exports.protobufPackage = "auth";
function createBaseRevokeTokenRequest() {
    return { accessToken: "", refreshToken: "" };
}
exports.RevokeTokenRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessToken !== "") {
            writer.uint32(18).string(message.accessToken);
        }
        if (message.refreshToken !== "") {
            writer.uint32(10).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        return obj;
    },
    create(base) {
        return exports.RevokeTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRevokeTokenRequest();
        message.accessToken = object.accessToken ?? "";
        message.refreshToken = object.refreshToken ?? "";
        return message;
    },
};
function createBaseValidateTokenRequest() {
    return { token: "" };
}
exports.ValidateTokenRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return exports.ValidateTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateTokenRequest();
        message.token = object.token ?? "";
        return message;
    },
};
function createBaseValidateTokenResponse() {
    return { isValid: false };
}
exports.ValidateTokenResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isValid !== false) {
            writer.uint32(8).bool(message.isValid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isValid = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isValid !== false) {
            obj.isValid = message.isValid;
        }
        return obj;
    },
    create(base) {
        return exports.ValidateTokenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateTokenResponse();
        message.isValid = object.isValid ?? false;
        return message;
    },
};
function createBaseRevokeTokenResponse() {
    return { success: false };
}
exports.RevokeTokenResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.RevokeTokenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRevokeTokenResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseRegisterRequest() {
    return { email: "", password: "", name: "" };
}
exports.RegisterRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.email !== "") {
            writer.uint32(10).string(message.email);
        }
        if (message.password !== "") {
            writer.uint32(18).string(message.password);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRegisterRequest();
        message.email = object.email ?? "";
        message.password = object.password ?? "";
        message.name = object.name ?? "";
        return message;
    },
};
function createBaseLoginRequest() {
    return { email: "", password: "" };
}
exports.LoginRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.email !== "") {
            writer.uint32(10).string(message.email);
        }
        if (message.password !== "") {
            writer.uint32(18).string(message.password);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLoginRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        return obj;
    },
    create(base) {
        return exports.LoginRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLoginRequest();
        message.email = object.email ?? "";
        message.password = object.password ?? "";
        return message;
    },
};
function createBaseSsoLoginRequest() {
    return { idToken: "", provider: "" };
}
exports.SsoLoginRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idToken !== "") {
            writer.uint32(10).string(message.idToken);
        }
        if (message.provider !== "") {
            writer.uint32(18).string(message.provider);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSsoLoginRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idToken = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.provider = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idToken: isSet(object.idToken) ? globalThis.String(object.idToken) : "",
            provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idToken !== "") {
            obj.idToken = message.idToken;
        }
        if (message.provider !== "") {
            obj.provider = message.provider;
        }
        return obj;
    },
    create(base) {
        return exports.SsoLoginRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSsoLoginRequest();
        message.idToken = object.idToken ?? "";
        message.provider = object.provider ?? "";
        return message;
    },
};
function createBaseWalletNonceRequest() {
    return { wallet: "" };
}
exports.WalletNonceRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.wallet !== "") {
            writer.uint32(10).string(message.wallet);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWalletNonceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.wallet = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { wallet: isSet(object.wallet) ? globalThis.String(object.wallet) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.wallet !== "") {
            obj.wallet = message.wallet;
        }
        return obj;
    },
    create(base) {
        return exports.WalletNonceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWalletNonceRequest();
        message.wallet = object.wallet ?? "";
        return message;
    },
};
function createBaseWalletNonceResponse() {
    return { walletNonce: "" };
}
exports.WalletNonceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.walletNonce !== "") {
            writer.uint32(10).string(message.walletNonce);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWalletNonceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.walletNonce = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { walletNonce: isSet(object.walletNonce) ? globalThis.String(object.walletNonce) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.walletNonce !== "") {
            obj.walletNonce = message.walletNonce;
        }
        return obj;
    },
    create(base) {
        return exports.WalletNonceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWalletNonceResponse();
        message.walletNonce = object.walletNonce ?? "";
        return message;
    },
};
function createBaseWalletLoginRequest() {
    return { walletAddress: "", signature: "", nonce: "" };
}
exports.WalletLoginRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.walletAddress !== "") {
            writer.uint32(10).string(message.walletAddress);
        }
        if (message.signature !== "") {
            writer.uint32(18).string(message.signature);
        }
        if (message.nonce !== "") {
            writer.uint32(26).string(message.nonce);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWalletLoginRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.walletAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.signature = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nonce = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            walletAddress: isSet(object.walletAddress) ? globalThis.String(object.walletAddress) : "",
            signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
            nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.walletAddress !== "") {
            obj.walletAddress = message.walletAddress;
        }
        if (message.signature !== "") {
            obj.signature = message.signature;
        }
        if (message.nonce !== "") {
            obj.nonce = message.nonce;
        }
        return obj;
    },
    create(base) {
        return exports.WalletLoginRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWalletLoginRequest();
        message.walletAddress = object.walletAddress ?? "";
        message.signature = object.signature ?? "";
        message.nonce = object.nonce ?? "";
        return message;
    },
};
function createBaseHealthResponse() {
    return { isHealthy: false };
}
exports.HealthResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isHealthy !== false) {
            writer.uint32(8).bool(message.isHealthy);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isHealthy = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isHealthy: isSet(object.isHealthy) ? globalThis.Boolean(object.isHealthy) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isHealthy !== false) {
            obj.isHealthy = message.isHealthy;
        }
        return obj;
    },
    create(base) {
        return exports.HealthResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHealthResponse();
        message.isHealthy = object.isHealthy ?? false;
        return message;
    },
};
function createBaseLinkWalletRequest() {
    return { userId: "", walletAddress: "", signature: "", nonce: "" };
}
exports.LinkWalletRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.walletAddress !== "") {
            writer.uint32(18).string(message.walletAddress);
        }
        if (message.signature !== "") {
            writer.uint32(26).string(message.signature);
        }
        if (message.nonce !== "") {
            writer.uint32(34).string(message.nonce);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkWalletRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.walletAddress = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.signature = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.nonce = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            walletAddress: isSet(object.walletAddress) ? globalThis.String(object.walletAddress) : "",
            signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
            nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.walletAddress !== "") {
            obj.walletAddress = message.walletAddress;
        }
        if (message.signature !== "") {
            obj.signature = message.signature;
        }
        if (message.nonce !== "") {
            obj.nonce = message.nonce;
        }
        return obj;
    },
    create(base) {
        return exports.LinkWalletRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLinkWalletRequest();
        message.userId = object.userId ?? "";
        message.walletAddress = object.walletAddress ?? "";
        message.signature = object.signature ?? "";
        message.nonce = object.nonce ?? "";
        return message;
    },
};
function createBaseRefreshTokenRequest() {
    return { refreshToken: "" };
}
exports.RefreshTokenRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.refreshToken !== "") {
            writer.uint32(10).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRefreshTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        return obj;
    },
    create(base) {
        return exports.RefreshTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRefreshTokenRequest();
        message.refreshToken = object.refreshToken ?? "";
        return message;
    },
};
function createBaseUserRequest() {
    return { id: "", email: "", walletAddress: "", role: "", roleId: "" };
}
exports.UserRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.email !== "") {
            writer.uint32(18).string(message.email);
        }
        if (message.walletAddress !== "") {
            writer.uint32(26).string(message.walletAddress);
        }
        if (message.role !== "") {
            writer.uint32(34).string(message.role);
        }
        if (message.roleId !== "") {
            writer.uint32(42).string(message.roleId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.walletAddress = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.roleId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            walletAddress: isSet(object.walletAddress) ? globalThis.String(object.walletAddress) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
            roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.walletAddress !== "") {
            obj.walletAddress = message.walletAddress;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        if (message.roleId !== "") {
            obj.roleId = message.roleId;
        }
        return obj;
    },
    create(base) {
        return exports.UserRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserRequest();
        message.id = object.id ?? "";
        message.email = object.email ?? "";
        message.walletAddress = object.walletAddress ?? "";
        message.role = object.role ?? "";
        message.roleId = object.roleId ?? "";
        return message;
    },
};
function createBaseAuthResponse() {
    return { token: "", refreshToken: "", user: undefined };
}
exports.AuthResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        if (message.refreshToken !== "") {
            writer.uint32(18).string(message.refreshToken);
        }
        if (message.user !== undefined) {
            exports.UserRequest.encode(message.user, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuthResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.user = exports.UserRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
            user: isSet(object.user) ? exports.UserRequest.fromJSON(object.user) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        if (message.user !== undefined) {
            obj.user = exports.UserRequest.toJSON(message.user);
        }
        return obj;
    },
    create(base) {
        return exports.AuthResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAuthResponse();
        message.token = object.token ?? "";
        message.refreshToken = object.refreshToken ?? "";
        message.user = (object.user !== undefined && object.user !== null)
            ? exports.UserRequest.fromPartial(object.user)
            : undefined;
        return message;
    },
};
exports.AuthServiceServiceName = "auth.AuthService";
class AuthServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.AuthServiceServiceName;
        this.rpc = rpc;
        this.Register = this.Register.bind(this);
        this.Login = this.Login.bind(this);
        this.SsoLogin = this.SsoLogin.bind(this);
        this.WalletNonce = this.WalletNonce.bind(this);
        this.WalletLogin = this.WalletLogin.bind(this);
        this.LinkWallet = this.LinkWallet.bind(this);
        this.RefreshToken = this.RefreshToken.bind(this);
        this.RevokeToken = this.RevokeToken.bind(this);
        this.ValidateToken = this.ValidateToken.bind(this);
        this.Health = this.Health.bind(this);
    }
    Register(request) {
        const data = exports.RegisterRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Register", data);
        return promise.then((data) => exports.AuthResponse.decode(new wire_1.BinaryReader(data)));
    }
    Login(request) {
        const data = exports.LoginRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Login", data);
        return promise.then((data) => exports.AuthResponse.decode(new wire_1.BinaryReader(data)));
    }
    SsoLogin(request) {
        const data = exports.SsoLoginRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SsoLogin", data);
        return promise.then((data) => exports.AuthResponse.decode(new wire_1.BinaryReader(data)));
    }
    WalletNonce(request) {
        const data = exports.WalletNonceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "WalletNonce", data);
        return promise.then((data) => exports.WalletNonceResponse.decode(new wire_1.BinaryReader(data)));
    }
    WalletLogin(request) {
        const data = exports.WalletLoginRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "WalletLogin", data);
        return promise.then((data) => exports.AuthResponse.decode(new wire_1.BinaryReader(data)));
    }
    LinkWallet(request) {
        const data = exports.LinkWalletRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "LinkWallet", data);
        return promise.then((data) => exports.AuthResponse.decode(new wire_1.BinaryReader(data)));
    }
    RefreshToken(request) {
        const data = exports.RefreshTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RefreshToken", data);
        return promise.then((data) => exports.AuthResponse.decode(new wire_1.BinaryReader(data)));
    }
    RevokeToken(request) {
        const data = exports.RevokeTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RevokeToken", data);
        return promise.then((data) => exports.RevokeTokenResponse.decode(new wire_1.BinaryReader(data)));
    }
    ValidateToken(request) {
        const data = exports.ValidateTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ValidateToken", data);
        return promise.then((data) => exports.ValidateTokenResponse.decode(new wire_1.BinaryReader(data)));
    }
    Health(request) {
        const data = empty_1.Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "Health", data);
        return promise.then((data) => exports.HealthResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.AuthServiceClientImpl = AuthServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=auth.js.map