"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: profile.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileServiceClientImpl = exports.ProfileServiceServiceName = exports.SuccessResponse = exports.GetProfileByIdRequest = exports.UpdateProfileRequest = exports.CreateProfileRequest = exports.ProfileResponse = exports.SubscribeRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "profile";
function createBaseSubscribeRequest() {
    return { targetId: "", subscribe: false, roleId: "", userId: "", role: "" };
}
exports.SubscribeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.targetId !== "") {
            writer.uint32(18).string(message.targetId);
        }
        if (message.subscribe !== false) {
            writer.uint32(24).bool(message.subscribe);
        }
        if (message.roleId !== "") {
            writer.uint32(34).string(message.roleId);
        }
        if (message.userId !== "") {
            writer.uint32(42).string(message.userId);
        }
        if (message.role !== "") {
            writer.uint32(50).string(message.role);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscribeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.targetId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.subscribe = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.roleId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            targetId: isSet(object.targetId) ? globalThis.String(object.targetId) : "",
            subscribe: isSet(object.subscribe) ? globalThis.Boolean(object.subscribe) : false,
            roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.targetId !== "") {
            obj.targetId = message.targetId;
        }
        if (message.subscribe !== false) {
            obj.subscribe = message.subscribe;
        }
        if (message.roleId !== "") {
            obj.roleId = message.roleId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        return obj;
    },
    create(base) {
        return exports.SubscribeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSubscribeRequest();
        message.targetId = object.targetId ?? "";
        message.subscribe = object.subscribe ?? false;
        message.roleId = object.roleId ?? "";
        message.userId = object.userId ?? "";
        message.role = object.role ?? "";
        return message;
    },
};
function createBaseProfileResponse() {
    return {
        id: "",
        userId: "",
        username: "",
        name: "",
        avatarUrl: "",
        bio: "",
        websiteUrl: "",
        twitter: "",
        facebook: "",
        youtube: "",
        discord: "",
        telegram: "",
        tiktok: "",
        instagram: "",
        isVerified: false,
        createdAt: "",
        updatedAt: "",
        jwtToken: undefined,
        refreshToken: undefined,
        email: undefined,
        followersCount: "",
        followingCount: "",
        subscribersCount: "",
        subscriptionsCount: "",
    };
}
exports.ProfileResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.username !== "") {
            writer.uint32(26).string(message.username);
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        if (message.avatarUrl !== "") {
            writer.uint32(42).string(message.avatarUrl);
        }
        if (message.bio !== "") {
            writer.uint32(50).string(message.bio);
        }
        if (message.websiteUrl !== "") {
            writer.uint32(58).string(message.websiteUrl);
        }
        if (message.twitter !== "") {
            writer.uint32(66).string(message.twitter);
        }
        if (message.facebook !== "") {
            writer.uint32(74).string(message.facebook);
        }
        if (message.youtube !== "") {
            writer.uint32(82).string(message.youtube);
        }
        if (message.discord !== "") {
            writer.uint32(186).string(message.discord);
        }
        if (message.telegram !== "") {
            writer.uint32(194).string(message.telegram);
        }
        if (message.tiktok !== "") {
            writer.uint32(90).string(message.tiktok);
        }
        if (message.instagram !== "") {
            writer.uint32(122).string(message.instagram);
        }
        if (message.isVerified !== false) {
            writer.uint32(96).bool(message.isVerified);
        }
        if (message.createdAt !== "") {
            writer.uint32(106).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(114).string(message.updatedAt);
        }
        if (message.jwtToken !== undefined) {
            writer.uint32(130).string(message.jwtToken);
        }
        if (message.refreshToken !== undefined) {
            writer.uint32(138).string(message.refreshToken);
        }
        if (message.email !== undefined) {
            writer.uint32(146).string(message.email);
        }
        if (message.followersCount !== "") {
            writer.uint32(154).string(message.followersCount);
        }
        if (message.followingCount !== "") {
            writer.uint32(162).string(message.followingCount);
        }
        if (message.subscribersCount !== "") {
            writer.uint32(170).string(message.subscribersCount);
        }
        if (message.subscriptionsCount !== "") {
            writer.uint32(178).string(message.subscriptionsCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProfileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.avatarUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.bio = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.websiteUrl = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.twitter = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.facebook = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.youtube = reader.string();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.discord = reader.string();
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.telegram = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.tiktok = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.instagram = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.isVerified = reader.bool();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.jwtToken = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.followersCount = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.followingCount = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.subscribersCount = reader.string();
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.subscriptionsCount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
            bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
            websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : "",
            twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
            facebook: isSet(object.facebook) ? globalThis.String(object.facebook) : "",
            youtube: isSet(object.youtube) ? globalThis.String(object.youtube) : "",
            discord: isSet(object.discord) ? globalThis.String(object.discord) : "",
            telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : "",
            tiktok: isSet(object.tiktok) ? globalThis.String(object.tiktok) : "",
            instagram: isSet(object.instagram) ? globalThis.String(object.instagram) : "",
            isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
            jwtToken: isSet(object.jwtToken) ? globalThis.String(object.jwtToken) : undefined,
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : undefined,
            email: isSet(object.email) ? globalThis.String(object.email) : undefined,
            followersCount: isSet(object.followersCount) ? globalThis.String(object.followersCount) : "",
            followingCount: isSet(object.followingCount) ? globalThis.String(object.followingCount) : "",
            subscribersCount: isSet(object.subscribersCount) ? globalThis.String(object.subscribersCount) : "",
            subscriptionsCount: isSet(object.subscriptionsCount) ? globalThis.String(object.subscriptionsCount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.avatarUrl !== "") {
            obj.avatarUrl = message.avatarUrl;
        }
        if (message.bio !== "") {
            obj.bio = message.bio;
        }
        if (message.websiteUrl !== "") {
            obj.websiteUrl = message.websiteUrl;
        }
        if (message.twitter !== "") {
            obj.twitter = message.twitter;
        }
        if (message.facebook !== "") {
            obj.facebook = message.facebook;
        }
        if (message.youtube !== "") {
            obj.youtube = message.youtube;
        }
        if (message.discord !== "") {
            obj.discord = message.discord;
        }
        if (message.telegram !== "") {
            obj.telegram = message.telegram;
        }
        if (message.tiktok !== "") {
            obj.tiktok = message.tiktok;
        }
        if (message.instagram !== "") {
            obj.instagram = message.instagram;
        }
        if (message.isVerified !== false) {
            obj.isVerified = message.isVerified;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        if (message.jwtToken !== undefined) {
            obj.jwtToken = message.jwtToken;
        }
        if (message.refreshToken !== undefined) {
            obj.refreshToken = message.refreshToken;
        }
        if (message.email !== undefined) {
            obj.email = message.email;
        }
        if (message.followersCount !== "") {
            obj.followersCount = message.followersCount;
        }
        if (message.followingCount !== "") {
            obj.followingCount = message.followingCount;
        }
        if (message.subscribersCount !== "") {
            obj.subscribersCount = message.subscribersCount;
        }
        if (message.subscriptionsCount !== "") {
            obj.subscriptionsCount = message.subscriptionsCount;
        }
        return obj;
    },
    create(base) {
        return exports.ProfileResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProfileResponse();
        message.id = object.id ?? "";
        message.userId = object.userId ?? "";
        message.username = object.username ?? "";
        message.name = object.name ?? "";
        message.avatarUrl = object.avatarUrl ?? "";
        message.bio = object.bio ?? "";
        message.websiteUrl = object.websiteUrl ?? "";
        message.twitter = object.twitter ?? "";
        message.facebook = object.facebook ?? "";
        message.youtube = object.youtube ?? "";
        message.discord = object.discord ?? "";
        message.telegram = object.telegram ?? "";
        message.tiktok = object.tiktok ?? "";
        message.instagram = object.instagram ?? "";
        message.isVerified = object.isVerified ?? false;
        message.createdAt = object.createdAt ?? "";
        message.updatedAt = object.updatedAt ?? "";
        message.jwtToken = object.jwtToken ?? undefined;
        message.refreshToken = object.refreshToken ?? undefined;
        message.email = object.email ?? undefined;
        message.followersCount = object.followersCount ?? "";
        message.followingCount = object.followingCount ?? "";
        message.subscribersCount = object.subscribersCount ?? "";
        message.subscriptionsCount = object.subscriptionsCount ?? "";
        return message;
    },
};
function createBaseCreateProfileRequest() {
    return {
        userId: "",
        username: "",
        name: undefined,
        avatarUrl: undefined,
        bio: undefined,
        websiteUrl: undefined,
        twitter: undefined,
        discord: undefined,
        telegram: undefined,
        facebook: undefined,
        youtube: undefined,
        tiktok: undefined,
        instagram: undefined,
    };
}
exports.CreateProfileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.name !== undefined) {
            writer.uint32(26).string(message.name);
        }
        if (message.avatarUrl !== undefined) {
            writer.uint32(34).string(message.avatarUrl);
        }
        if (message.bio !== undefined) {
            writer.uint32(42).string(message.bio);
        }
        if (message.websiteUrl !== undefined) {
            writer.uint32(50).string(message.websiteUrl);
        }
        if (message.twitter !== undefined) {
            writer.uint32(58).string(message.twitter);
        }
        if (message.discord !== undefined) {
            writer.uint32(98).string(message.discord);
        }
        if (message.telegram !== undefined) {
            writer.uint32(106).string(message.telegram);
        }
        if (message.facebook !== undefined) {
            writer.uint32(66).string(message.facebook);
        }
        if (message.youtube !== undefined) {
            writer.uint32(74).string(message.youtube);
        }
        if (message.tiktok !== undefined) {
            writer.uint32(82).string(message.tiktok);
        }
        if (message.instagram !== undefined) {
            writer.uint32(90).string(message.instagram);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.avatarUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.bio = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.websiteUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.twitter = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.discord = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.telegram = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.facebook = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.youtube = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.tiktok = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.instagram = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : undefined,
            bio: isSet(object.bio) ? globalThis.String(object.bio) : undefined,
            websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : undefined,
            twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : undefined,
            discord: isSet(object.discord) ? globalThis.String(object.discord) : undefined,
            telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : undefined,
            facebook: isSet(object.facebook) ? globalThis.String(object.facebook) : undefined,
            youtube: isSet(object.youtube) ? globalThis.String(object.youtube) : undefined,
            tiktok: isSet(object.tiktok) ? globalThis.String(object.tiktok) : undefined,
            instagram: isSet(object.instagram) ? globalThis.String(object.instagram) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.avatarUrl !== undefined) {
            obj.avatarUrl = message.avatarUrl;
        }
        if (message.bio !== undefined) {
            obj.bio = message.bio;
        }
        if (message.websiteUrl !== undefined) {
            obj.websiteUrl = message.websiteUrl;
        }
        if (message.twitter !== undefined) {
            obj.twitter = message.twitter;
        }
        if (message.discord !== undefined) {
            obj.discord = message.discord;
        }
        if (message.telegram !== undefined) {
            obj.telegram = message.telegram;
        }
        if (message.facebook !== undefined) {
            obj.facebook = message.facebook;
        }
        if (message.youtube !== undefined) {
            obj.youtube = message.youtube;
        }
        if (message.tiktok !== undefined) {
            obj.tiktok = message.tiktok;
        }
        if (message.instagram !== undefined) {
            obj.instagram = message.instagram;
        }
        return obj;
    },
    create(base) {
        return exports.CreateProfileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateProfileRequest();
        message.userId = object.userId ?? "";
        message.username = object.username ?? "";
        message.name = object.name ?? undefined;
        message.avatarUrl = object.avatarUrl ?? undefined;
        message.bio = object.bio ?? undefined;
        message.websiteUrl = object.websiteUrl ?? undefined;
        message.twitter = object.twitter ?? undefined;
        message.discord = object.discord ?? undefined;
        message.telegram = object.telegram ?? undefined;
        message.facebook = object.facebook ?? undefined;
        message.youtube = object.youtube ?? undefined;
        message.tiktok = object.tiktok ?? undefined;
        message.instagram = object.instagram ?? undefined;
        return message;
    },
};
function createBaseUpdateProfileRequest() {
    return {
        userId: "",
        username: undefined,
        name: undefined,
        avatarUrl: undefined,
        bio: undefined,
        websiteUrl: undefined,
        twitter: undefined,
        facebook: undefined,
        discord: undefined,
        telegram: undefined,
        youtube: undefined,
        tiktok: undefined,
        instagram: undefined,
    };
}
exports.UpdateProfileRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.username !== undefined) {
            writer.uint32(18).string(message.username);
        }
        if (message.name !== undefined) {
            writer.uint32(26).string(message.name);
        }
        if (message.avatarUrl !== undefined) {
            writer.uint32(34).string(message.avatarUrl);
        }
        if (message.bio !== undefined) {
            writer.uint32(42).string(message.bio);
        }
        if (message.websiteUrl !== undefined) {
            writer.uint32(50).string(message.websiteUrl);
        }
        if (message.twitter !== undefined) {
            writer.uint32(58).string(message.twitter);
        }
        if (message.facebook !== undefined) {
            writer.uint32(66).string(message.facebook);
        }
        if (message.discord !== undefined) {
            writer.uint32(98).string(message.discord);
        }
        if (message.telegram !== undefined) {
            writer.uint32(106).string(message.telegram);
        }
        if (message.youtube !== undefined) {
            writer.uint32(74).string(message.youtube);
        }
        if (message.tiktok !== undefined) {
            writer.uint32(82).string(message.tiktok);
        }
        if (message.instagram !== undefined) {
            writer.uint32(90).string(message.instagram);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.avatarUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.bio = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.websiteUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.twitter = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.facebook = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.discord = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.telegram = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.youtube = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.tiktok = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.instagram = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : undefined,
            bio: isSet(object.bio) ? globalThis.String(object.bio) : undefined,
            websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : undefined,
            twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : undefined,
            facebook: isSet(object.facebook) ? globalThis.String(object.facebook) : undefined,
            discord: isSet(object.discord) ? globalThis.String(object.discord) : undefined,
            telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : undefined,
            youtube: isSet(object.youtube) ? globalThis.String(object.youtube) : undefined,
            tiktok: isSet(object.tiktok) ? globalThis.String(object.tiktok) : undefined,
            instagram: isSet(object.instagram) ? globalThis.String(object.instagram) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.username !== undefined) {
            obj.username = message.username;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.avatarUrl !== undefined) {
            obj.avatarUrl = message.avatarUrl;
        }
        if (message.bio !== undefined) {
            obj.bio = message.bio;
        }
        if (message.websiteUrl !== undefined) {
            obj.websiteUrl = message.websiteUrl;
        }
        if (message.twitter !== undefined) {
            obj.twitter = message.twitter;
        }
        if (message.facebook !== undefined) {
            obj.facebook = message.facebook;
        }
        if (message.discord !== undefined) {
            obj.discord = message.discord;
        }
        if (message.telegram !== undefined) {
            obj.telegram = message.telegram;
        }
        if (message.youtube !== undefined) {
            obj.youtube = message.youtube;
        }
        if (message.tiktok !== undefined) {
            obj.tiktok = message.tiktok;
        }
        if (message.instagram !== undefined) {
            obj.instagram = message.instagram;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateProfileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateProfileRequest();
        message.userId = object.userId ?? "";
        message.username = object.username ?? undefined;
        message.name = object.name ?? undefined;
        message.avatarUrl = object.avatarUrl ?? undefined;
        message.bio = object.bio ?? undefined;
        message.websiteUrl = object.websiteUrl ?? undefined;
        message.twitter = object.twitter ?? undefined;
        message.facebook = object.facebook ?? undefined;
        message.discord = object.discord ?? undefined;
        message.telegram = object.telegram ?? undefined;
        message.youtube = object.youtube ?? undefined;
        message.tiktok = object.tiktok ?? undefined;
        message.instagram = object.instagram ?? undefined;
        return message;
    },
};
function createBaseGetProfileByIdRequest() {
    return { isPrivate: false, profileId: "" };
}
exports.GetProfileByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isPrivate !== false) {
            writer.uint32(8).bool(message.isPrivate);
        }
        if (message.profileId !== "") {
            writer.uint32(18).string(message.profileId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProfileByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isPrivate = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            isPrivate: isSet(object.isPrivate) ? globalThis.Boolean(object.isPrivate) : false,
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.isPrivate !== false) {
            obj.isPrivate = message.isPrivate;
        }
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        return obj;
    },
    create(base) {
        return exports.GetProfileByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProfileByIdRequest();
        message.isPrivate = object.isPrivate ?? false;
        message.profileId = object.profileId ?? "";
        return message;
    },
};
function createBaseSuccessResponse() {
    return { success: false };
}
exports.SuccessResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuccessResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.SuccessResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuccessResponse();
        message.success = object.success ?? false;
        return message;
    },
};
exports.ProfileServiceServiceName = "profile.ProfileService";
class ProfileServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.ProfileServiceServiceName;
        this.rpc = rpc;
        this.Create = this.Create.bind(this);
        this.Update = this.Update.bind(this);
        this.GetProfileById = this.GetProfileById.bind(this);
        this.SubscribeProfile = this.SubscribeProfile.bind(this);
    }
    Create(request) {
        const data = exports.CreateProfileRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Create", data);
        return promise.then((data) => exports.ProfileResponse.decode(new wire_1.BinaryReader(data)));
    }
    Update(request) {
        const data = exports.UpdateProfileRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Update", data);
        return promise.then((data) => exports.ProfileResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetProfileById(request) {
        const data = exports.GetProfileByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetProfileById", data);
        return promise.then((data) => exports.ProfileResponse.decode(new wire_1.BinaryReader(data)));
    }
    SubscribeProfile(request) {
        const data = exports.SubscribeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SubscribeProfile", data);
        return promise.then((data) => exports.SuccessResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.ProfileServiceClientImpl = ProfileServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=profile.js.map