"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: brand.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrandServiceClientImpl = exports.BrandServiceServiceName = exports.UpdateBrandRequest = exports.CreateBrandRequest = exports.BrandResponse = exports.BrandByIdRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "brand";
function createBaseBrandByIdRequest() {
    return { brandId: "" };
}
exports.BrandByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.brandId !== "") {
            writer.uint32(10).string(message.brandId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBrandByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        return obj;
    },
    create(base) {
        return exports.BrandByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBrandByIdRequest();
        message.brandId = object.brandId ?? "";
        return message;
    },
};
function createBaseBrandResponse() {
    return {
        id: "",
        userId: "",
        name: "",
        description: "",
        logoUrl: "",
        websiteUrl: "",
        createdAt: "",
        updatedAt: "",
        jwtToken: undefined,
        refreshToken: undefined,
        followersCount: "",
        followingCount: "",
        tags: [],
        campaignCount: "",
        tokenName: "",
        discord: "",
        twitter: "",
        telegram: "",
    };
}
exports.BrandResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.logoUrl !== "") {
            writer.uint32(42).string(message.logoUrl);
        }
        if (message.websiteUrl !== "") {
            writer.uint32(50).string(message.websiteUrl);
        }
        if (message.createdAt !== "") {
            writer.uint32(58).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(66).string(message.updatedAt);
        }
        if (message.jwtToken !== undefined) {
            writer.uint32(74).string(message.jwtToken);
        }
        if (message.refreshToken !== undefined) {
            writer.uint32(82).string(message.refreshToken);
        }
        if (message.followersCount !== "") {
            writer.uint32(90).string(message.followersCount);
        }
        if (message.followingCount !== "") {
            writer.uint32(98).string(message.followingCount);
        }
        for (const v of message.tags) {
            writer.uint32(106).string(v);
        }
        if (message.campaignCount !== "") {
            writer.uint32(114).string(message.campaignCount);
        }
        if (message.tokenName !== "") {
            writer.uint32(122).string(message.tokenName);
        }
        if (message.discord !== "") {
            writer.uint32(130).string(message.discord);
        }
        if (message.twitter !== "") {
            writer.uint32(138).string(message.twitter);
        }
        if (message.telegram !== "") {
            writer.uint32(146).string(message.telegram);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBrandResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.logoUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.websiteUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.jwtToken = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.followersCount = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.followingCount = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.tags.push(reader.string());
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.campaignCount = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.tokenName = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.discord = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.twitter = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.telegram = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : "",
            websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : "",
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
            jwtToken: isSet(object.jwtToken) ? globalThis.String(object.jwtToken) : undefined,
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : undefined,
            followersCount: isSet(object.followersCount) ? globalThis.String(object.followersCount) : "",
            followingCount: isSet(object.followingCount) ? globalThis.String(object.followingCount) : "",
            tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e) => globalThis.String(e)) : [],
            campaignCount: isSet(object.campaignCount) ? globalThis.String(object.campaignCount) : "",
            tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : "",
            discord: isSet(object.discord) ? globalThis.String(object.discord) : "",
            twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
            telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.logoUrl !== "") {
            obj.logoUrl = message.logoUrl;
        }
        if (message.websiteUrl !== "") {
            obj.websiteUrl = message.websiteUrl;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        if (message.jwtToken !== undefined) {
            obj.jwtToken = message.jwtToken;
        }
        if (message.refreshToken !== undefined) {
            obj.refreshToken = message.refreshToken;
        }
        if (message.followersCount !== "") {
            obj.followersCount = message.followersCount;
        }
        if (message.followingCount !== "") {
            obj.followingCount = message.followingCount;
        }
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        if (message.campaignCount !== "") {
            obj.campaignCount = message.campaignCount;
        }
        if (message.tokenName !== "") {
            obj.tokenName = message.tokenName;
        }
        if (message.discord !== "") {
            obj.discord = message.discord;
        }
        if (message.twitter !== "") {
            obj.twitter = message.twitter;
        }
        if (message.telegram !== "") {
            obj.telegram = message.telegram;
        }
        return obj;
    },
    create(base) {
        return exports.BrandResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBrandResponse();
        message.id = object.id ?? "";
        message.userId = object.userId ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.logoUrl = object.logoUrl ?? "";
        message.websiteUrl = object.websiteUrl ?? "";
        message.createdAt = object.createdAt ?? "";
        message.updatedAt = object.updatedAt ?? "";
        message.jwtToken = object.jwtToken ?? undefined;
        message.refreshToken = object.refreshToken ?? undefined;
        message.followersCount = object.followersCount ?? "";
        message.followingCount = object.followingCount ?? "";
        message.tags = object.tags?.map((e) => e) || [];
        message.campaignCount = object.campaignCount ?? "";
        message.tokenName = object.tokenName ?? "";
        message.discord = object.discord ?? "";
        message.twitter = object.twitter ?? "";
        message.telegram = object.telegram ?? "";
        return message;
    },
};
function createBaseCreateBrandRequest() {
    return {
        userId: "",
        name: "",
        description: undefined,
        logoUrl: undefined,
        websiteUrl: undefined,
        tags: [],
        discord: undefined,
        twitter: undefined,
        telegram: undefined,
        tokenName: undefined,
    };
}
exports.CreateBrandRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.logoUrl !== undefined) {
            writer.uint32(34).string(message.logoUrl);
        }
        if (message.websiteUrl !== undefined) {
            writer.uint32(42).string(message.websiteUrl);
        }
        for (const v of message.tags) {
            writer.uint32(50).string(v);
        }
        if (message.discord !== undefined) {
            writer.uint32(58).string(message.discord);
        }
        if (message.twitter !== undefined) {
            writer.uint32(66).string(message.twitter);
        }
        if (message.telegram !== undefined) {
            writer.uint32(74).string(message.telegram);
        }
        if (message.tokenName !== undefined) {
            writer.uint32(82).string(message.tokenName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateBrandRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.logoUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.websiteUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.tags.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.discord = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.twitter = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.telegram = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.tokenName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
            websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : undefined,
            tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e) => globalThis.String(e)) : [],
            discord: isSet(object.discord) ? globalThis.String(object.discord) : undefined,
            twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : undefined,
            telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : undefined,
            tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.logoUrl !== undefined) {
            obj.logoUrl = message.logoUrl;
        }
        if (message.websiteUrl !== undefined) {
            obj.websiteUrl = message.websiteUrl;
        }
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        if (message.discord !== undefined) {
            obj.discord = message.discord;
        }
        if (message.twitter !== undefined) {
            obj.twitter = message.twitter;
        }
        if (message.telegram !== undefined) {
            obj.telegram = message.telegram;
        }
        if (message.tokenName !== undefined) {
            obj.tokenName = message.tokenName;
        }
        return obj;
    },
    create(base) {
        return exports.CreateBrandRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateBrandRequest();
        message.userId = object.userId ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? undefined;
        message.logoUrl = object.logoUrl ?? undefined;
        message.websiteUrl = object.websiteUrl ?? undefined;
        message.tags = object.tags?.map((e) => e) || [];
        message.discord = object.discord ?? undefined;
        message.twitter = object.twitter ?? undefined;
        message.telegram = object.telegram ?? undefined;
        message.tokenName = object.tokenName ?? undefined;
        return message;
    },
};
function createBaseUpdateBrandRequest() {
    return {
        userId: "",
        name: undefined,
        description: undefined,
        logoUrl: undefined,
        websiteUrl: undefined,
        tags: [],
        discord: undefined,
        twitter: undefined,
        telegram: undefined,
        tokenName: undefined,
    };
}
exports.UpdateBrandRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.logoUrl !== undefined) {
            writer.uint32(34).string(message.logoUrl);
        }
        if (message.websiteUrl !== undefined) {
            writer.uint32(42).string(message.websiteUrl);
        }
        for (const v of message.tags) {
            writer.uint32(50).string(v);
        }
        if (message.discord !== undefined) {
            writer.uint32(58).string(message.discord);
        }
        if (message.twitter !== undefined) {
            writer.uint32(66).string(message.twitter);
        }
        if (message.telegram !== undefined) {
            writer.uint32(74).string(message.telegram);
        }
        if (message.tokenName !== undefined) {
            writer.uint32(82).string(message.tokenName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateBrandRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.logoUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.websiteUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.tags.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.discord = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.twitter = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.telegram = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.tokenName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
            websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : undefined,
            tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e) => globalThis.String(e)) : [],
            discord: isSet(object.discord) ? globalThis.String(object.discord) : undefined,
            twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : undefined,
            telegram: isSet(object.telegram) ? globalThis.String(object.telegram) : undefined,
            tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.logoUrl !== undefined) {
            obj.logoUrl = message.logoUrl;
        }
        if (message.websiteUrl !== undefined) {
            obj.websiteUrl = message.websiteUrl;
        }
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        if (message.discord !== undefined) {
            obj.discord = message.discord;
        }
        if (message.twitter !== undefined) {
            obj.twitter = message.twitter;
        }
        if (message.telegram !== undefined) {
            obj.telegram = message.telegram;
        }
        if (message.tokenName !== undefined) {
            obj.tokenName = message.tokenName;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateBrandRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateBrandRequest();
        message.userId = object.userId ?? "";
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.logoUrl = object.logoUrl ?? undefined;
        message.websiteUrl = object.websiteUrl ?? undefined;
        message.tags = object.tags?.map((e) => e) || [];
        message.discord = object.discord ?? undefined;
        message.twitter = object.twitter ?? undefined;
        message.telegram = object.telegram ?? undefined;
        message.tokenName = object.tokenName ?? undefined;
        return message;
    },
};
exports.BrandServiceServiceName = "brand.BrandService";
class BrandServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.BrandServiceServiceName;
        this.rpc = rpc;
        this.Create = this.Create.bind(this);
        this.Update = this.Update.bind(this);
        this.GetBrandById = this.GetBrandById.bind(this);
    }
    Create(request) {
        const data = exports.CreateBrandRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Create", data);
        return promise.then((data) => exports.BrandResponse.decode(new wire_1.BinaryReader(data)));
    }
    Update(request) {
        const data = exports.UpdateBrandRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Update", data);
        return promise.then((data) => exports.BrandResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetBrandById(request) {
        const data = exports.BrandByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetBrandById", data);
        return promise.then((data) => exports.BrandResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.BrandServiceClientImpl = BrandServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=brand.js.map