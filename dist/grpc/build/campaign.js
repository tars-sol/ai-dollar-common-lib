"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: campaign.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CampaignServiceClientImpl = exports.CampaignServiceServiceName = exports.SearchCampaignsResponse = exports.CampaignSearchItem = exports.SearchCampaignsRequest = exports.GetCampaignsResponse = exports.GetTasksResponse = exports.GetTasksByCampaignIdRequest = exports.DeleteCampaignByIdRequest = exports.DeleteTaskByIdRequest = exports.CampaignsByIdRequest = exports.GetCampaignsByBrandIdRequest = exports.TaskCompletedResponse = exports.TaskResponse = exports.UpdateCampaignRequest = exports.CampaignResponse = exports.UpdatePrivateCampaignProfilesRequest = exports.LeaveCampaignRequest = exports.JoinPublicCampaignRequest = exports.UpdateTaskRequest = exports.TaskInput = exports.SuccessResponse = exports.CreateCampaignRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "campaign";
function createBaseCreateCampaignRequest() {
    return {
        brandId: "",
        amountToInvest: 0,
        startDate: "",
        endDate: "",
        tasks: [],
        name: "",
        description: "",
        profileIds: [],
        isPrivate: false,
    };
}
exports.CreateCampaignRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.brandId !== "") {
            writer.uint32(10).string(message.brandId);
        }
        if (message.amountToInvest !== 0) {
            writer.uint32(17).double(message.amountToInvest);
        }
        if (message.startDate !== "") {
            writer.uint32(26).string(message.startDate);
        }
        if (message.endDate !== "") {
            writer.uint32(34).string(message.endDate);
        }
        for (const v of message.tasks) {
            exports.TaskInput.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(50).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(58).string(message.description);
        }
        for (const v of message.profileIds) {
            writer.uint32(74).string(v);
        }
        if (message.isPrivate !== false) {
            writer.uint32(80).bool(message.isPrivate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateCampaignRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.amountToInvest = reader.double();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.tasks.push(exports.TaskInput.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.profileIds.push(reader.string());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.isPrivate = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            amountToInvest: isSet(object.amountToInvest) ? globalThis.Number(object.amountToInvest) : 0,
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
            tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e) => exports.TaskInput.fromJSON(e)) : [],
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            profileIds: globalThis.Array.isArray(object?.profileIds)
                ? object.profileIds.map((e) => globalThis.String(e))
                : [],
            isPrivate: isSet(object.isPrivate) ? globalThis.Boolean(object.isPrivate) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.amountToInvest !== 0) {
            obj.amountToInvest = message.amountToInvest;
        }
        if (message.startDate !== "") {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== "") {
            obj.endDate = message.endDate;
        }
        if (message.tasks?.length) {
            obj.tasks = message.tasks.map((e) => exports.TaskInput.toJSON(e));
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.profileIds?.length) {
            obj.profileIds = message.profileIds;
        }
        if (message.isPrivate !== false) {
            obj.isPrivate = message.isPrivate;
        }
        return obj;
    },
    create(base) {
        return exports.CreateCampaignRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateCampaignRequest();
        message.brandId = object.brandId ?? "";
        message.amountToInvest = object.amountToInvest ?? 0;
        message.startDate = object.startDate ?? "";
        message.endDate = object.endDate ?? "";
        message.tasks = object.tasks?.map((e) => exports.TaskInput.fromPartial(e)) || [];
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.profileIds = object.profileIds?.map((e) => e) || [];
        message.isPrivate = object.isPrivate ?? false;
        return message;
    },
};
function createBaseSuccessResponse() {
    return { success: false };
}
exports.SuccessResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuccessResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.SuccessResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuccessResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseTaskInput() {
    return { title: "", description: "", type: "" };
}
exports.TaskInput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.type !== "") {
            writer.uint32(34).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        return obj;
    },
    create(base) {
        return exports.TaskInput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTaskInput();
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.type = object.type ?? "";
        return message;
    },
};
function createBaseUpdateTaskRequest() {
    return { title: undefined, description: undefined, brandId: "", type: undefined, id: "" };
}
exports.UpdateTaskRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== undefined) {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== undefined) {
            writer.uint32(18).string(message.description);
        }
        if (message.brandId !== "") {
            writer.uint32(42).string(message.brandId);
        }
        if (message.type !== undefined) {
            writer.uint32(26).string(message.type);
        }
        if (message.id !== "") {
            writer.uint32(34).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateTaskRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== undefined) {
            obj.title = message.title;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.type !== undefined) {
            obj.type = message.type;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateTaskRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateTaskRequest();
        message.title = object.title ?? undefined;
        message.description = object.description ?? undefined;
        message.brandId = object.brandId ?? "";
        message.type = object.type ?? undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseJoinPublicCampaignRequest() {
    return { campaignId: "", profileId: "" };
}
exports.JoinPublicCampaignRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.campaignId !== "") {
            writer.uint32(10).string(message.campaignId);
        }
        if (message.profileId !== "") {
            writer.uint32(18).string(message.profileId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJoinPublicCampaignRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.campaignId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.campaignId !== "") {
            obj.campaignId = message.campaignId;
        }
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        return obj;
    },
    create(base) {
        return exports.JoinPublicCampaignRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseJoinPublicCampaignRequest();
        message.campaignId = object.campaignId ?? "";
        message.profileId = object.profileId ?? "";
        return message;
    },
};
function createBaseLeaveCampaignRequest() {
    return { campaignId: "", profileId: "" };
}
exports.LeaveCampaignRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.campaignId !== "") {
            writer.uint32(10).string(message.campaignId);
        }
        if (message.profileId !== "") {
            writer.uint32(18).string(message.profileId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLeaveCampaignRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.campaignId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.campaignId !== "") {
            obj.campaignId = message.campaignId;
        }
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        return obj;
    },
    create(base) {
        return exports.LeaveCampaignRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLeaveCampaignRequest();
        message.campaignId = object.campaignId ?? "";
        message.profileId = object.profileId ?? "";
        return message;
    },
};
function createBaseUpdatePrivateCampaignProfilesRequest() {
    return { campaignId: "", profileId: "", brandId: "" };
}
exports.UpdatePrivateCampaignProfilesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.campaignId !== "") {
            writer.uint32(10).string(message.campaignId);
        }
        if (message.profileId !== "") {
            writer.uint32(18).string(message.profileId);
        }
        if (message.brandId !== "") {
            writer.uint32(26).string(message.brandId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePrivateCampaignProfilesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.campaignId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.campaignId !== "") {
            obj.campaignId = message.campaignId;
        }
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePrivateCampaignProfilesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePrivateCampaignProfilesRequest();
        message.campaignId = object.campaignId ?? "";
        message.profileId = object.profileId ?? "";
        message.brandId = object.brandId ?? "";
        return message;
    },
};
function createBaseCampaignResponse() {
    return {
        id: "",
        brandId: "",
        amountToInvest: 0,
        startDate: "",
        endDate: "",
        createdAt: "",
        updatedAt: "",
        status: "",
        isPrivate: false,
        name: "",
        description: "",
    };
}
exports.CampaignResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.brandId !== "") {
            writer.uint32(18).string(message.brandId);
        }
        if (message.amountToInvest !== 0) {
            writer.uint32(25).double(message.amountToInvest);
        }
        if (message.startDate !== "") {
            writer.uint32(34).string(message.startDate);
        }
        if (message.endDate !== "") {
            writer.uint32(42).string(message.endDate);
        }
        if (message.createdAt !== "") {
            writer.uint32(58).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(66).string(message.updatedAt);
        }
        if (message.status !== "") {
            writer.uint32(90).string(message.status);
        }
        if (message.isPrivate !== false) {
            writer.uint32(96).bool(message.isPrivate);
        }
        if (message.name !== "") {
            writer.uint32(74).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(82).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCampaignResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.amountToInvest = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.isPrivate = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            amountToInvest: isSet(object.amountToInvest) ? globalThis.Number(object.amountToInvest) : 0,
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            isPrivate: isSet(object.isPrivate) ? globalThis.Boolean(object.isPrivate) : false,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.amountToInvest !== 0) {
            obj.amountToInvest = message.amountToInvest;
        }
        if (message.startDate !== "") {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== "") {
            obj.endDate = message.endDate;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.isPrivate !== false) {
            obj.isPrivate = message.isPrivate;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.CampaignResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCampaignResponse();
        message.id = object.id ?? "";
        message.brandId = object.brandId ?? "";
        message.amountToInvest = object.amountToInvest ?? 0;
        message.startDate = object.startDate ?? "";
        message.endDate = object.endDate ?? "";
        message.createdAt = object.createdAt ?? "";
        message.updatedAt = object.updatedAt ?? "";
        message.status = object.status ?? "";
        message.isPrivate = object.isPrivate ?? false;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseUpdateCampaignRequest() {
    return {
        id: "",
        brandId: "",
        amountToInvest: undefined,
        startDate: undefined,
        endDate: undefined,
        name: undefined,
        description: undefined,
    };
}
exports.UpdateCampaignRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.brandId !== "") {
            writer.uint32(18).string(message.brandId);
        }
        if (message.amountToInvest !== undefined) {
            writer.uint32(25).double(message.amountToInvest);
        }
        if (message.startDate !== undefined) {
            writer.uint32(34).string(message.startDate);
        }
        if (message.endDate !== undefined) {
            writer.uint32(42).string(message.endDate);
        }
        if (message.name !== undefined) {
            writer.uint32(74).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(82).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCampaignRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.amountToInvest = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            amountToInvest: isSet(object.amountToInvest) ? globalThis.Number(object.amountToInvest) : undefined,
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.amountToInvest !== undefined) {
            obj.amountToInvest = message.amountToInvest;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCampaignRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCampaignRequest();
        message.id = object.id ?? "";
        message.brandId = object.brandId ?? "";
        message.amountToInvest = object.amountToInvest ?? undefined;
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        return message;
    },
};
function createBaseTaskResponse() {
    return { id: "", title: "", description: "", campaignId: "", type: "", createdAt: "", updatedAt: "" };
}
exports.TaskResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.campaignId !== "") {
            writer.uint32(58).string(message.campaignId);
        }
        if (message.type !== "") {
            writer.uint32(66).string(message.type);
        }
        if (message.createdAt !== "") {
            writer.uint32(42).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(50).string(message.updatedAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.campaignId = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.campaignId !== "") {
            obj.campaignId = message.campaignId;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        return obj;
    },
    create(base) {
        return exports.TaskResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTaskResponse();
        message.id = object.id ?? "";
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.campaignId = object.campaignId ?? "";
        message.type = object.type ?? "";
        message.createdAt = object.createdAt ?? "";
        message.updatedAt = object.updatedAt ?? "";
        return message;
    },
};
function createBaseTaskCompletedResponse() {
    return { campaignId: "", taskId: "", profileId: "", brandId: "" };
}
exports.TaskCompletedResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.campaignId !== "") {
            writer.uint32(10).string(message.campaignId);
        }
        if (message.taskId !== "") {
            writer.uint32(18).string(message.taskId);
        }
        if (message.profileId !== "") {
            writer.uint32(26).string(message.profileId);
        }
        if (message.brandId !== "") {
            writer.uint32(34).string(message.brandId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskCompletedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.campaignId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.taskId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
            taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.campaignId !== "") {
            obj.campaignId = message.campaignId;
        }
        if (message.taskId !== "") {
            obj.taskId = message.taskId;
        }
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        return obj;
    },
    create(base) {
        return exports.TaskCompletedResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTaskCompletedResponse();
        message.campaignId = object.campaignId ?? "";
        message.taskId = object.taskId ?? "";
        message.profileId = object.profileId ?? "";
        message.brandId = object.brandId ?? "";
        return message;
    },
};
function createBaseGetCampaignsByBrandIdRequest() {
    return {
        roleId: "",
        role: "",
        brandId: undefined,
        sortBy: undefined,
        sortOrder: undefined,
        status: undefined,
        startDateFrom: undefined,
        startDateTo: undefined,
        endDateFrom: undefined,
        endDateTo: undefined,
    };
}
exports.GetCampaignsByBrandIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roleId !== "") {
            writer.uint32(10).string(message.roleId);
        }
        if (message.role !== "") {
            writer.uint32(26).string(message.role);
        }
        if (message.brandId !== undefined) {
            writer.uint32(18).string(message.brandId);
        }
        if (message.sortBy !== undefined) {
            writer.uint32(34).string(message.sortBy);
        }
        if (message.sortOrder !== undefined) {
            writer.uint32(42).string(message.sortOrder);
        }
        if (message.status !== undefined) {
            writer.uint32(50).string(message.status);
        }
        if (message.startDateFrom !== undefined) {
            writer.uint32(58).string(message.startDateFrom);
        }
        if (message.startDateTo !== undefined) {
            writer.uint32(66).string(message.startDateTo);
        }
        if (message.endDateFrom !== undefined) {
            writer.uint32(74).string(message.endDateFrom);
        }
        if (message.endDateTo !== undefined) {
            writer.uint32(82).string(message.endDateTo);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCampaignsByBrandIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.roleId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sortBy = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.sortOrder = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.startDateFrom = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.startDateTo = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.endDateFrom = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.endDateTo = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : undefined,
            sortBy: isSet(object.sortBy) ? globalThis.String(object.sortBy) : undefined,
            sortOrder: isSet(object.sortOrder) ? globalThis.String(object.sortOrder) : undefined,
            status: isSet(object.status) ? globalThis.String(object.status) : undefined,
            startDateFrom: isSet(object.startDateFrom) ? globalThis.String(object.startDateFrom) : undefined,
            startDateTo: isSet(object.startDateTo) ? globalThis.String(object.startDateTo) : undefined,
            endDateFrom: isSet(object.endDateFrom) ? globalThis.String(object.endDateFrom) : undefined,
            endDateTo: isSet(object.endDateTo) ? globalThis.String(object.endDateTo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.roleId !== "") {
            obj.roleId = message.roleId;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        if (message.brandId !== undefined) {
            obj.brandId = message.brandId;
        }
        if (message.sortBy !== undefined) {
            obj.sortBy = message.sortBy;
        }
        if (message.sortOrder !== undefined) {
            obj.sortOrder = message.sortOrder;
        }
        if (message.status !== undefined) {
            obj.status = message.status;
        }
        if (message.startDateFrom !== undefined) {
            obj.startDateFrom = message.startDateFrom;
        }
        if (message.startDateTo !== undefined) {
            obj.startDateTo = message.startDateTo;
        }
        if (message.endDateFrom !== undefined) {
            obj.endDateFrom = message.endDateFrom;
        }
        if (message.endDateTo !== undefined) {
            obj.endDateTo = message.endDateTo;
        }
        return obj;
    },
    create(base) {
        return exports.GetCampaignsByBrandIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCampaignsByBrandIdRequest();
        message.roleId = object.roleId ?? "";
        message.role = object.role ?? "";
        message.brandId = object.brandId ?? undefined;
        message.sortBy = object.sortBy ?? undefined;
        message.sortOrder = object.sortOrder ?? undefined;
        message.status = object.status ?? undefined;
        message.startDateFrom = object.startDateFrom ?? undefined;
        message.startDateTo = object.startDateTo ?? undefined;
        message.endDateFrom = object.endDateFrom ?? undefined;
        message.endDateTo = object.endDateTo ?? undefined;
        return message;
    },
};
function createBaseCampaignsByIdRequest() {
    return { id: "", roleId: "", role: "" };
}
exports.CampaignsByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.roleId !== "") {
            writer.uint32(26).string(message.roleId);
        }
        if (message.role !== "") {
            writer.uint32(34).string(message.role);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCampaignsByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.roleId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.roleId !== "") {
            obj.roleId = message.roleId;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        return obj;
    },
    create(base) {
        return exports.CampaignsByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCampaignsByIdRequest();
        message.id = object.id ?? "";
        message.roleId = object.roleId ?? "";
        message.role = object.role ?? "";
        return message;
    },
};
function createBaseDeleteTaskByIdRequest() {
    return { brandId: "", id: "" };
}
exports.DeleteTaskByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.brandId !== "") {
            writer.uint32(18).string(message.brandId);
        }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteTaskByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteTaskByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteTaskByIdRequest();
        message.brandId = object.brandId ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseDeleteCampaignByIdRequest() {
    return { brandId: "", id: "" };
}
exports.DeleteCampaignByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.brandId !== "") {
            writer.uint32(18).string(message.brandId);
        }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCampaignByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteCampaignByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteCampaignByIdRequest();
        message.brandId = object.brandId ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetTasksByCampaignIdRequest() {
    return { campaignId: "" };
}
exports.GetTasksByCampaignIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.campaignId !== "") {
            writer.uint32(10).string(message.campaignId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTasksByCampaignIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.campaignId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.campaignId !== "") {
            obj.campaignId = message.campaignId;
        }
        return obj;
    },
    create(base) {
        return exports.GetTasksByCampaignIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTasksByCampaignIdRequest();
        message.campaignId = object.campaignId ?? "";
        return message;
    },
};
function createBaseGetTasksResponse() {
    return { tasks: [] };
}
exports.GetTasksResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tasks) {
            exports.TaskResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTasksResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tasks.push(exports.TaskResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e) => exports.TaskResponse.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tasks?.length) {
            obj.tasks = message.tasks.map((e) => exports.TaskResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetTasksResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTasksResponse();
        message.tasks = object.tasks?.map((e) => exports.TaskResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetCampaignsResponse() {
    return { campaigns: [] };
}
exports.GetCampaignsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.campaigns) {
            exports.CampaignResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCampaignsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.campaigns.push(exports.CampaignResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            campaigns: globalThis.Array.isArray(object?.campaigns)
                ? object.campaigns.map((e) => exports.CampaignResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.campaigns?.length) {
            obj.campaigns = message.campaigns.map((e) => exports.CampaignResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetCampaignsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCampaignsResponse();
        message.campaigns = object.campaigns?.map((e) => exports.CampaignResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSearchCampaignsRequest() {
    return { q: "", page: 0, limit: 0 };
}
exports.SearchCampaignsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.q !== "") {
            writer.uint32(10).string(message.q);
        }
        if (message.page !== 0) {
            writer.uint32(16).int32(message.page);
        }
        if (message.limit !== 0) {
            writer.uint32(24).int32(message.limit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchCampaignsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.q = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.page = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            q: isSet(object.q) ? globalThis.String(object.q) : "",
            page: isSet(object.page) ? globalThis.Number(object.page) : 0,
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.q !== "") {
            obj.q = message.q;
        }
        if (message.page !== 0) {
            obj.page = Math.round(message.page);
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        return obj;
    },
    create(base) {
        return exports.SearchCampaignsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchCampaignsRequest();
        message.q = object.q ?? "";
        message.page = object.page ?? 0;
        message.limit = object.limit ?? 0;
        return message;
    },
};
function createBaseCampaignSearchItem() {
    return { id: "", name: "", brandId: "", createdAt: "", score: 0 };
}
exports.CampaignSearchItem = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.brandId !== "") {
            writer.uint32(26).string(message.brandId);
        }
        if (message.createdAt !== "") {
            writer.uint32(34).string(message.createdAt);
        }
        if (message.score !== 0) {
            writer.uint32(41).double(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCampaignSearchItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 41) {
                        break;
                    }
                    message.score = reader.double();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            score: isSet(object.score) ? globalThis.Number(object.score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.score !== 0) {
            obj.score = message.score;
        }
        return obj;
    },
    create(base) {
        return exports.CampaignSearchItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCampaignSearchItem();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.brandId = object.brandId ?? "";
        message.createdAt = object.createdAt ?? "";
        message.score = object.score ?? 0;
        return message;
    },
};
function createBaseSearchCampaignsResponse() {
    return { results: [], total: 0 };
}
exports.SearchCampaignsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.results) {
            exports.CampaignSearchItem.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.total !== 0) {
            writer.uint32(16).int32(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchCampaignsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(exports.CampaignSearchItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object?.results)
                ? object.results.map((e) => exports.CampaignSearchItem.fromJSON(e))
                : [],
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.results?.length) {
            obj.results = message.results.map((e) => exports.CampaignSearchItem.toJSON(e));
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        return obj;
    },
    create(base) {
        return exports.SearchCampaignsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchCampaignsResponse();
        message.results = object.results?.map((e) => exports.CampaignSearchItem.fromPartial(e)) || [];
        message.total = object.total ?? 0;
        return message;
    },
};
exports.CampaignServiceServiceName = "campaign.CampaignService";
class CampaignServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.CampaignServiceServiceName;
        this.rpc = rpc;
        this.CreateCampaign = this.CreateCampaign.bind(this);
        this.GetCampaignsByBrandId = this.GetCampaignsByBrandId.bind(this);
        this.GetCampaignById = this.GetCampaignById.bind(this);
        this.UpdateCampaign = this.UpdateCampaign.bind(this);
        this.UpdateCampaignTasks = this.UpdateCampaignTasks.bind(this);
        this.GetTasksByCampaignId = this.GetTasksByCampaignId.bind(this);
        this.DeleteCampaignById = this.DeleteCampaignById.bind(this);
        this.DeleteTaskById = this.DeleteTaskById.bind(this);
        this.AddProfileToCampaign = this.AddProfileToCampaign.bind(this);
        this.RemoveProfileFromCampaign = this.RemoveProfileFromCampaign.bind(this);
        this.JoinPublicCampaign = this.JoinPublicCampaign.bind(this);
        this.LeaveCampaign = this.LeaveCampaign.bind(this);
        this.MarkTaskAsCompleted = this.MarkTaskAsCompleted.bind(this);
        this.SearchCampaigns = this.SearchCampaigns.bind(this);
    }
    CreateCampaign(request) {
        const data = exports.CreateCampaignRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateCampaign", data);
        return promise.then((data) => exports.CampaignResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetCampaignsByBrandId(request) {
        const data = exports.GetCampaignsByBrandIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCampaignsByBrandId", data);
        return promise.then((data) => exports.GetCampaignsResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetCampaignById(request) {
        const data = exports.CampaignsByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCampaignById", data);
        return promise.then((data) => exports.CampaignResponse.decode(new wire_1.BinaryReader(data)));
    }
    UpdateCampaign(request) {
        const data = exports.UpdateCampaignRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateCampaign", data);
        return promise.then((data) => exports.CampaignResponse.decode(new wire_1.BinaryReader(data)));
    }
    UpdateCampaignTasks(request) {
        const data = exports.UpdateTaskRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateCampaignTasks", data);
        return promise.then((data) => exports.TaskResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTasksByCampaignId(request) {
        const data = exports.GetTasksByCampaignIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTasksByCampaignId", data);
        return promise.then((data) => exports.GetTasksResponse.decode(new wire_1.BinaryReader(data)));
    }
    DeleteCampaignById(request) {
        const data = exports.CampaignsByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteCampaignById", data);
        return promise.then((data) => exports.CampaignResponse.decode(new wire_1.BinaryReader(data)));
    }
    DeleteTaskById(request) {
        const data = exports.DeleteTaskByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteTaskById", data);
        return promise.then((data) => exports.TaskResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddProfileToCampaign(request) {
        const data = exports.UpdatePrivateCampaignProfilesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddProfileToCampaign", data);
        return promise.then((data) => exports.SuccessResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveProfileFromCampaign(request) {
        const data = exports.UpdatePrivateCampaignProfilesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveProfileFromCampaign", data);
        return promise.then((data) => exports.SuccessResponse.decode(new wire_1.BinaryReader(data)));
    }
    JoinPublicCampaign(request) {
        const data = exports.JoinPublicCampaignRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "JoinPublicCampaign", data);
        return promise.then((data) => exports.SuccessResponse.decode(new wire_1.BinaryReader(data)));
    }
    LeaveCampaign(request) {
        const data = exports.LeaveCampaignRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "LeaveCampaign", data);
        return promise.then((data) => exports.SuccessResponse.decode(new wire_1.BinaryReader(data)));
    }
    MarkTaskAsCompleted(request) {
        const data = exports.TaskCompletedResponse.encode(request).finish();
        const promise = this.rpc.request(this.service, "MarkTaskAsCompleted", data);
        return promise.then((data) => exports.SuccessResponse.decode(new wire_1.BinaryReader(data)));
    }
    SearchCampaigns(request) {
        const data = exports.SearchCampaignsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SearchCampaigns", data);
        return promise.then((data) => exports.SearchCampaignsResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.CampaignServiceClientImpl = CampaignServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=campaign.js.map