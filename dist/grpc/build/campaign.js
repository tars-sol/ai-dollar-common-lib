"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: campaign.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CampaignServiceClientImpl = exports.CampaignServiceServiceName = exports.GetCampaignsResponse = exports.GetTasksResponse = exports.GetTasksByCampaignIdRequest = exports.DeleteCampaignByIdRequest = exports.DeleteTaskByIdRequest = exports.CampaignsByIdRequest = exports.GetCampaignsByBrandIdRequest = exports.TaskResponse = exports.UpdateCampaignRequest = exports.CampaignResponse = exports.UpdateTaskRequest = exports.TaskInput = exports.CreateCampaignRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "campaign";
function createBaseCreateCampaignRequest() {
    return { brandId: "", amountToInvest: 0, startDate: "", endDate: "", tasks: [], name: "", description: "" };
}
exports.CreateCampaignRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.brandId !== "") {
            writer.uint32(10).string(message.brandId);
        }
        if (message.amountToInvest !== 0) {
            writer.uint32(17).double(message.amountToInvest);
        }
        if (message.startDate !== "") {
            writer.uint32(26).string(message.startDate);
        }
        if (message.endDate !== "") {
            writer.uint32(34).string(message.endDate);
        }
        for (const v of message.tasks) {
            exports.TaskInput.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(50).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(58).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateCampaignRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.amountToInvest = reader.double();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.tasks.push(exports.TaskInput.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            amountToInvest: isSet(object.amountToInvest) ? globalThis.Number(object.amountToInvest) : 0,
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
            tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e) => exports.TaskInput.fromJSON(e)) : [],
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.amountToInvest !== 0) {
            obj.amountToInvest = message.amountToInvest;
        }
        if (message.startDate !== "") {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== "") {
            obj.endDate = message.endDate;
        }
        if (message.tasks?.length) {
            obj.tasks = message.tasks.map((e) => exports.TaskInput.toJSON(e));
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.CreateCampaignRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateCampaignRequest();
        message.brandId = object.brandId ?? "";
        message.amountToInvest = object.amountToInvest ?? 0;
        message.startDate = object.startDate ?? "";
        message.endDate = object.endDate ?? "";
        message.tasks = object.tasks?.map((e) => exports.TaskInput.fromPartial(e)) || [];
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseTaskInput() {
    return { title: "", description: "", type: "" };
}
exports.TaskInput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.type !== "") {
            writer.uint32(34).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        return obj;
    },
    create(base) {
        return exports.TaskInput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTaskInput();
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.type = object.type ?? "";
        return message;
    },
};
function createBaseUpdateTaskRequest() {
    return { title: undefined, description: undefined, brandId: "", type: undefined, id: "" };
}
exports.UpdateTaskRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== undefined) {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== undefined) {
            writer.uint32(18).string(message.description);
        }
        if (message.brandId !== "") {
            writer.uint32(42).string(message.brandId);
        }
        if (message.type !== undefined) {
            writer.uint32(26).string(message.type);
        }
        if (message.id !== "") {
            writer.uint32(34).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateTaskRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== undefined) {
            obj.title = message.title;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.type !== undefined) {
            obj.type = message.type;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateTaskRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateTaskRequest();
        message.title = object.title ?? undefined;
        message.description = object.description ?? undefined;
        message.brandId = object.brandId ?? "";
        message.type = object.type ?? undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseCampaignResponse() {
    return {
        id: "",
        brandId: "",
        amountToInvest: 0,
        startDate: "",
        endDate: "",
        createdAt: "",
        updatedAt: "",
        name: "",
        description: "",
    };
}
exports.CampaignResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.brandId !== "") {
            writer.uint32(18).string(message.brandId);
        }
        if (message.amountToInvest !== 0) {
            writer.uint32(25).double(message.amountToInvest);
        }
        if (message.startDate !== "") {
            writer.uint32(34).string(message.startDate);
        }
        if (message.endDate !== "") {
            writer.uint32(42).string(message.endDate);
        }
        if (message.createdAt !== "") {
            writer.uint32(58).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(66).string(message.updatedAt);
        }
        if (message.name !== "") {
            writer.uint32(74).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(82).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCampaignResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.amountToInvest = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            amountToInvest: isSet(object.amountToInvest) ? globalThis.Number(object.amountToInvest) : 0,
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.amountToInvest !== 0) {
            obj.amountToInvest = message.amountToInvest;
        }
        if (message.startDate !== "") {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== "") {
            obj.endDate = message.endDate;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.CampaignResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCampaignResponse();
        message.id = object.id ?? "";
        message.brandId = object.brandId ?? "";
        message.amountToInvest = object.amountToInvest ?? 0;
        message.startDate = object.startDate ?? "";
        message.endDate = object.endDate ?? "";
        message.createdAt = object.createdAt ?? "";
        message.updatedAt = object.updatedAt ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseUpdateCampaignRequest() {
    return {
        id: "",
        brandId: "",
        amountToInvest: undefined,
        startDate: undefined,
        endDate: undefined,
        name: undefined,
        description: undefined,
    };
}
exports.UpdateCampaignRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.brandId !== "") {
            writer.uint32(18).string(message.brandId);
        }
        if (message.amountToInvest !== undefined) {
            writer.uint32(25).double(message.amountToInvest);
        }
        if (message.startDate !== undefined) {
            writer.uint32(34).string(message.startDate);
        }
        if (message.endDate !== undefined) {
            writer.uint32(42).string(message.endDate);
        }
        if (message.name !== undefined) {
            writer.uint32(74).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(82).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCampaignRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.amountToInvest = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.startDate = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.endDate = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            amountToInvest: isSet(object.amountToInvest) ? globalThis.Number(object.amountToInvest) : undefined,
            startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.amountToInvest !== undefined) {
            obj.amountToInvest = message.amountToInvest;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate;
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCampaignRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCampaignRequest();
        message.id = object.id ?? "";
        message.brandId = object.brandId ?? "";
        message.amountToInvest = object.amountToInvest ?? undefined;
        message.startDate = object.startDate ?? undefined;
        message.endDate = object.endDate ?? undefined;
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        return message;
    },
};
function createBaseTaskResponse() {
    return { id: "", title: "", description: "", campaignId: "", type: "", createdAt: "", updatedAt: "" };
}
exports.TaskResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.campaignId !== "") {
            writer.uint32(58).string(message.campaignId);
        }
        if (message.type !== "") {
            writer.uint32(66).string(message.type);
        }
        if (message.createdAt !== "") {
            writer.uint32(42).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(50).string(message.updatedAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.campaignId = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.campaignId !== "") {
            obj.campaignId = message.campaignId;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        return obj;
    },
    create(base) {
        return exports.TaskResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTaskResponse();
        message.id = object.id ?? "";
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.campaignId = object.campaignId ?? "";
        message.type = object.type ?? "";
        message.createdAt = object.createdAt ?? "";
        message.updatedAt = object.updatedAt ?? "";
        return message;
    },
};
function createBaseGetCampaignsByBrandIdRequest() {
    return { brandId: "" };
}
exports.GetCampaignsByBrandIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.brandId !== "") {
            writer.uint32(10).string(message.brandId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCampaignsByBrandIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        return obj;
    },
    create(base) {
        return exports.GetCampaignsByBrandIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCampaignsByBrandIdRequest();
        message.brandId = object.brandId ?? "";
        return message;
    },
};
function createBaseCampaignsByIdRequest() {
    return { id: "" };
}
exports.CampaignsByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCampaignsByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.CampaignsByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCampaignsByIdRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseDeleteTaskByIdRequest() {
    return { brandId: "", id: "" };
}
exports.DeleteTaskByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.brandId !== "") {
            writer.uint32(18).string(message.brandId);
        }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteTaskByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteTaskByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteTaskByIdRequest();
        message.brandId = object.brandId ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseDeleteCampaignByIdRequest() {
    return { brandId: "", id: "" };
}
exports.DeleteCampaignByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.brandId !== "") {
            writer.uint32(18).string(message.brandId);
        }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCampaignByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.brandId = reader.string();
                    continue;
                }
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            brandId: isSet(object.brandId) ? globalThis.String(object.brandId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.brandId !== "") {
            obj.brandId = message.brandId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteCampaignByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteCampaignByIdRequest();
        message.brandId = object.brandId ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetTasksByCampaignIdRequest() {
    return { campaignId: "" };
}
exports.GetTasksByCampaignIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.campaignId !== "") {
            writer.uint32(10).string(message.campaignId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTasksByCampaignIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.campaignId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.campaignId !== "") {
            obj.campaignId = message.campaignId;
        }
        return obj;
    },
    create(base) {
        return exports.GetTasksByCampaignIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTasksByCampaignIdRequest();
        message.campaignId = object.campaignId ?? "";
        return message;
    },
};
function createBaseGetTasksResponse() {
    return { tasks: [] };
}
exports.GetTasksResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tasks) {
            exports.TaskResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTasksResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tasks.push(exports.TaskResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e) => exports.TaskResponse.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tasks?.length) {
            obj.tasks = message.tasks.map((e) => exports.TaskResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetTasksResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTasksResponse();
        message.tasks = object.tasks?.map((e) => exports.TaskResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetCampaignsResponse() {
    return { campaigns: [] };
}
exports.GetCampaignsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.campaigns) {
            exports.CampaignResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCampaignsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.campaigns.push(exports.CampaignResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            campaigns: globalThis.Array.isArray(object?.campaigns)
                ? object.campaigns.map((e) => exports.CampaignResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.campaigns?.length) {
            obj.campaigns = message.campaigns.map((e) => exports.CampaignResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetCampaignsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCampaignsResponse();
        message.campaigns = object.campaigns?.map((e) => exports.CampaignResponse.fromPartial(e)) || [];
        return message;
    },
};
exports.CampaignServiceServiceName = "campaign.CampaignService";
class CampaignServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.CampaignServiceServiceName;
        this.rpc = rpc;
        this.CreateCampaign = this.CreateCampaign.bind(this);
        this.GetCampaignsByBrandId = this.GetCampaignsByBrandId.bind(this);
        this.GetCampaignById = this.GetCampaignById.bind(this);
        this.UpdateCampaign = this.UpdateCampaign.bind(this);
        this.UpdateCampaignTasks = this.UpdateCampaignTasks.bind(this);
        this.GetTasksByCampaignId = this.GetTasksByCampaignId.bind(this);
        this.DeleteCampaignById = this.DeleteCampaignById.bind(this);
        this.DeleteTaskById = this.DeleteTaskById.bind(this);
    }
    CreateCampaign(request) {
        const data = exports.CreateCampaignRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateCampaign", data);
        return promise.then((data) => exports.CampaignResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetCampaignsByBrandId(request) {
        const data = exports.GetCampaignsByBrandIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCampaignsByBrandId", data);
        return promise.then((data) => exports.GetCampaignsResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetCampaignById(request) {
        const data = exports.CampaignsByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCampaignById", data);
        return promise.then((data) => exports.CampaignResponse.decode(new wire_1.BinaryReader(data)));
    }
    UpdateCampaign(request) {
        const data = exports.UpdateCampaignRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateCampaign", data);
        return promise.then((data) => exports.CampaignResponse.decode(new wire_1.BinaryReader(data)));
    }
    UpdateCampaignTasks(request) {
        const data = exports.UpdateTaskRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateCampaignTasks", data);
        return promise.then((data) => exports.TaskResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetTasksByCampaignId(request) {
        const data = exports.GetTasksByCampaignIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTasksByCampaignId", data);
        return promise.then((data) => exports.GetTasksResponse.decode(new wire_1.BinaryReader(data)));
    }
    DeleteCampaignById(request) {
        const data = exports.CampaignsByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteCampaignById", data);
        return promise.then((data) => exports.CampaignResponse.decode(new wire_1.BinaryReader(data)));
    }
    DeleteTaskById(request) {
        const data = exports.DeleteTaskByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteTaskById", data);
        return promise.then((data) => exports.TaskResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.CampaignServiceClientImpl = CampaignServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=campaign.js.map