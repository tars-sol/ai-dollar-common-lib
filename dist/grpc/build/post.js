"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: post.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostServiceClientImpl = exports.PostServiceServiceName = exports.GetUserPostsRequest = exports.PostResponse = exports.RemoveFromPortfolioRequest = exports.AddToPortfolioRequest = exports.Creator = exports.PostReactionRequest = exports.PostPollOptionResponse = exports.PostPollResponse = exports.HealthResponse = exports.VoteOnPollRequest = exports.PostFileResponse = exports.PostMediaResponse = exports.GetCommentsResponse = exports.GetPortfolioRequest = exports.GetCommentsRequest = exports.CommentResponse = exports.CreateCommentRequest = exports.GetFeedResponse = exports.GetFeedRequest = exports.GenerateUploadUrlResponse = exports.GenerateUploadUrlRequest = exports.UpdatePostRequest = exports.SuccessResponse = exports.DeletePostRequest = exports.CreatePostRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const empty_1 = require("./google/protobuf/empty");
exports.protobufPackage = "post";
function createBaseCreatePostRequest() {
    return {
        profileId: "",
        caption: "",
        accessType: "",
        postType: "",
        mimeType: undefined,
        giphyUrl: undefined,
        mediaType: undefined,
        s3Key: undefined,
        fileType: undefined,
        originalFileName: undefined,
        pollEndTime: undefined,
        options: [],
    };
}
exports.CreatePostRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        if (message.caption !== "") {
            writer.uint32(18).string(message.caption);
        }
        if (message.accessType !== "") {
            writer.uint32(26).string(message.accessType);
        }
        if (message.postType !== "") {
            writer.uint32(66).string(message.postType);
        }
        if (message.mimeType !== undefined) {
            writer.uint32(34).string(message.mimeType);
        }
        if (message.giphyUrl !== undefined) {
            writer.uint32(106).string(message.giphyUrl);
        }
        if (message.mediaType !== undefined) {
            writer.uint32(74).string(message.mediaType);
        }
        if (message.s3Key !== undefined) {
            writer.uint32(42).string(message.s3Key);
        }
        if (message.fileType !== undefined) {
            writer.uint32(50).string(message.fileType);
        }
        if (message.originalFileName !== undefined) {
            writer.uint32(58).string(message.originalFileName);
        }
        if (message.pollEndTime !== undefined) {
            writer.uint32(82).string(message.pollEndTime);
        }
        for (const v of message.options) {
            writer.uint32(90).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePostRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.caption = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.accessType = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.postType = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.mimeType = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.giphyUrl = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.mediaType = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.s3Key = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.fileType = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.originalFileName = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.pollEndTime = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.options.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            caption: isSet(object.caption) ? globalThis.String(object.caption) : "",
            accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : "",
            postType: isSet(object.postType) ? globalThis.String(object.postType) : "",
            mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : undefined,
            giphyUrl: isSet(object.giphyUrl) ? globalThis.String(object.giphyUrl) : undefined,
            mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : undefined,
            s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : undefined,
            fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : undefined,
            originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : undefined,
            pollEndTime: isSet(object.pollEndTime) ? globalThis.String(object.pollEndTime) : undefined,
            options: globalThis.Array.isArray(object?.options) ? object.options.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.caption !== "") {
            obj.caption = message.caption;
        }
        if (message.accessType !== "") {
            obj.accessType = message.accessType;
        }
        if (message.postType !== "") {
            obj.postType = message.postType;
        }
        if (message.mimeType !== undefined) {
            obj.mimeType = message.mimeType;
        }
        if (message.giphyUrl !== undefined) {
            obj.giphyUrl = message.giphyUrl;
        }
        if (message.mediaType !== undefined) {
            obj.mediaType = message.mediaType;
        }
        if (message.s3Key !== undefined) {
            obj.s3Key = message.s3Key;
        }
        if (message.fileType !== undefined) {
            obj.fileType = message.fileType;
        }
        if (message.originalFileName !== undefined) {
            obj.originalFileName = message.originalFileName;
        }
        if (message.pollEndTime !== undefined) {
            obj.pollEndTime = message.pollEndTime;
        }
        if (message.options?.length) {
            obj.options = message.options;
        }
        return obj;
    },
    create(base) {
        return exports.CreatePostRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePostRequest();
        message.profileId = object.profileId ?? "";
        message.caption = object.caption ?? "";
        message.accessType = object.accessType ?? "";
        message.postType = object.postType ?? "";
        message.mimeType = object.mimeType ?? undefined;
        message.giphyUrl = object.giphyUrl ?? undefined;
        message.mediaType = object.mediaType ?? undefined;
        message.s3Key = object.s3Key ?? undefined;
        message.fileType = object.fileType ?? undefined;
        message.originalFileName = object.originalFileName ?? undefined;
        message.pollEndTime = object.pollEndTime ?? undefined;
        message.options = object.options?.map((e) => e) || [];
        return message;
    },
};
function createBaseDeletePostRequest() {
    return { id: "", profileId: "" };
}
exports.DeletePostRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.profileId !== "") {
            writer.uint32(18).string(message.profileId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeletePostRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        return obj;
    },
    create(base) {
        return exports.DeletePostRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeletePostRequest();
        message.id = object.id ?? "";
        message.profileId = object.profileId ?? "";
        return message;
    },
};
function createBaseSuccessResponse() {
    return { success: false };
}
exports.SuccessResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuccessResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.SuccessResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSuccessResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseUpdatePostRequest() {
    return { id: "", profileId: "", caption: undefined, accessType: undefined };
}
exports.UpdatePostRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.profileId !== "") {
            writer.uint32(18).string(message.profileId);
        }
        if (message.caption !== undefined) {
            writer.uint32(26).string(message.caption);
        }
        if (message.accessType !== undefined) {
            writer.uint32(34).string(message.accessType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePostRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.caption = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.accessType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
            accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.caption !== undefined) {
            obj.caption = message.caption;
        }
        if (message.accessType !== undefined) {
            obj.accessType = message.accessType;
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePostRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePostRequest();
        message.id = object.id ?? "";
        message.profileId = object.profileId ?? "";
        message.caption = object.caption ?? undefined;
        message.accessType = object.accessType ?? undefined;
        return message;
    },
};
function createBaseGenerateUploadUrlRequest() {
    return { profileId: "", fileName: "", contentType: "" };
}
exports.GenerateUploadUrlRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        if (message.fileName !== "") {
            writer.uint32(18).string(message.fileName);
        }
        if (message.contentType !== "") {
            writer.uint32(26).string(message.contentType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateUploadUrlRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.fileName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.contentType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
            contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.fileName !== "") {
            obj.fileName = message.fileName;
        }
        if (message.contentType !== "") {
            obj.contentType = message.contentType;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateUploadUrlRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenerateUploadUrlRequest();
        message.profileId = object.profileId ?? "";
        message.fileName = object.fileName ?? "";
        message.contentType = object.contentType ?? "";
        return message;
    },
};
function createBaseGenerateUploadUrlResponse() {
    return { uploadUrl: "", key: "" };
}
exports.GenerateUploadUrlResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uploadUrl !== "") {
            writer.uint32(10).string(message.uploadUrl);
        }
        if (message.key !== "") {
            writer.uint32(18).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateUploadUrlResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.uploadUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            uploadUrl: isSet(object.uploadUrl) ? globalThis.String(object.uploadUrl) : "",
            key: isSet(object.key) ? globalThis.String(object.key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.uploadUrl !== "") {
            obj.uploadUrl = message.uploadUrl;
        }
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateUploadUrlResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenerateUploadUrlResponse();
        message.uploadUrl = object.uploadUrl ?? "";
        message.key = object.key ?? "";
        return message;
    },
};
function createBaseGetFeedRequest() {
    return { profileId: "", page: 0, perPage: 0, userId: "" };
}
exports.GetFeedRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        if (message.page !== 0) {
            writer.uint32(16).uint32(message.page);
        }
        if (message.perPage !== 0) {
            writer.uint32(24).uint32(message.perPage);
        }
        if (message.userId !== "") {
            writer.uint32(34).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFeedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.page = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.perPage = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            page: isSet(object.page) ? globalThis.Number(object.page) : 0,
            perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.page !== 0) {
            obj.page = Math.round(message.page);
        }
        if (message.perPage !== 0) {
            obj.perPage = Math.round(message.perPage);
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.GetFeedRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFeedRequest();
        message.profileId = object.profileId ?? "";
        message.page = object.page ?? 0;
        message.perPage = object.perPage ?? 0;
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseGetFeedResponse() {
    return { posts: [] };
}
exports.GetFeedResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.posts) {
            exports.PostResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFeedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.posts.push(exports.PostResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e) => exports.PostResponse.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.posts?.length) {
            obj.posts = message.posts.map((e) => exports.PostResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetFeedResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFeedResponse();
        message.posts = object.posts?.map((e) => exports.PostResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreateCommentRequest() {
    return { profileId: "", text: "", postId: "" };
}
exports.CreateCommentRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        if (message.postId !== "") {
            writer.uint32(26).string(message.postId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateCommentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        return obj;
    },
    create(base) {
        return exports.CreateCommentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateCommentRequest();
        message.profileId = object.profileId ?? "";
        message.text = object.text ?? "";
        message.postId = object.postId ?? "";
        return message;
    },
};
function createBaseCommentResponse() {
    return { profileId: "", text: "", postId: "", createdAt: "", updatedAt: "", id: "" };
}
exports.CommentResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        if (message.postId !== "") {
            writer.uint32(26).string(message.postId);
        }
        if (message.createdAt !== "") {
            writer.uint32(34).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(42).string(message.updatedAt);
        }
        if (message.id !== "") {
            writer.uint32(50).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.CommentResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommentResponse();
        message.profileId = object.profileId ?? "";
        message.text = object.text ?? "";
        message.postId = object.postId ?? "";
        message.createdAt = object.createdAt ?? "";
        message.updatedAt = object.updatedAt ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetCommentsRequest() {
    return { postId: "" };
}
exports.GetCommentsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.postId !== "") {
            writer.uint32(10).string(message.postId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCommentsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { postId: isSet(object.postId) ? globalThis.String(object.postId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        return obj;
    },
    create(base) {
        return exports.GetCommentsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCommentsRequest();
        message.postId = object.postId ?? "";
        return message;
    },
};
function createBaseGetPortfolioRequest() {
    return { profileId: "" };
}
exports.GetPortfolioRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPortfolioRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        return obj;
    },
    create(base) {
        return exports.GetPortfolioRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPortfolioRequest();
        message.profileId = object.profileId ?? "";
        return message;
    },
};
function createBaseGetCommentsResponse() {
    return { comments: [] };
}
exports.GetCommentsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.comments) {
            exports.CommentResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCommentsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.comments.push(exports.CommentResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            comments: globalThis.Array.isArray(object?.comments)
                ? object.comments.map((e) => exports.CommentResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.comments?.length) {
            obj.comments = message.comments.map((e) => exports.CommentResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetCommentsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCommentsResponse();
        message.comments = object.comments?.map((e) => exports.CommentResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBasePostMediaResponse() {
    return {
        id: "",
        mimeType: undefined,
        mediaType: "",
        s3Key: undefined,
        originalFileName: undefined,
        signedUrl: undefined,
        giphyUrl: undefined,
    };
}
exports.PostMediaResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(50).string(message.id);
        }
        if (message.mimeType !== undefined) {
            writer.uint32(10).string(message.mimeType);
        }
        if (message.mediaType !== "") {
            writer.uint32(18).string(message.mediaType);
        }
        if (message.s3Key !== undefined) {
            writer.uint32(26).string(message.s3Key);
        }
        if (message.originalFileName !== undefined) {
            writer.uint32(34).string(message.originalFileName);
        }
        if (message.signedUrl !== undefined) {
            writer.uint32(42).string(message.signedUrl);
        }
        if (message.giphyUrl !== undefined) {
            writer.uint32(58).string(message.giphyUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostMediaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mimeType = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mediaType = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.s3Key = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.originalFileName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.signedUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.giphyUrl = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : undefined,
            mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : "",
            s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : undefined,
            originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : undefined,
            signedUrl: isSet(object.signedUrl) ? globalThis.String(object.signedUrl) : undefined,
            giphyUrl: isSet(object.giphyUrl) ? globalThis.String(object.giphyUrl) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.mimeType !== undefined) {
            obj.mimeType = message.mimeType;
        }
        if (message.mediaType !== "") {
            obj.mediaType = message.mediaType;
        }
        if (message.s3Key !== undefined) {
            obj.s3Key = message.s3Key;
        }
        if (message.originalFileName !== undefined) {
            obj.originalFileName = message.originalFileName;
        }
        if (message.signedUrl !== undefined) {
            obj.signedUrl = message.signedUrl;
        }
        if (message.giphyUrl !== undefined) {
            obj.giphyUrl = message.giphyUrl;
        }
        return obj;
    },
    create(base) {
        return exports.PostMediaResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostMediaResponse();
        message.id = object.id ?? "";
        message.mimeType = object.mimeType ?? undefined;
        message.mediaType = object.mediaType ?? "";
        message.s3Key = object.s3Key ?? undefined;
        message.originalFileName = object.originalFileName ?? undefined;
        message.signedUrl = object.signedUrl ?? undefined;
        message.giphyUrl = object.giphyUrl ?? undefined;
        return message;
    },
};
function createBasePostFileResponse() {
    return { id: "", mimeType: "", s3Key: "", originalFileName: "", signedUrl: "", fileType: "", sizeInBytes: "" };
}
exports.PostFileResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(50).string(message.id);
        }
        if (message.mimeType !== "") {
            writer.uint32(10).string(message.mimeType);
        }
        if (message.s3Key !== "") {
            writer.uint32(26).string(message.s3Key);
        }
        if (message.originalFileName !== "") {
            writer.uint32(34).string(message.originalFileName);
        }
        if (message.signedUrl !== "") {
            writer.uint32(42).string(message.signedUrl);
        }
        if (message.fileType !== "") {
            writer.uint32(58).string(message.fileType);
        }
        if (message.sizeInBytes !== "") {
            writer.uint32(66).string(message.sizeInBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostFileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mimeType = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.s3Key = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.originalFileName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.signedUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.fileType = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.sizeInBytes = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
            s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : "",
            originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : "",
            signedUrl: isSet(object.signedUrl) ? globalThis.String(object.signedUrl) : "",
            fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
            sizeInBytes: isSet(object.sizeInBytes) ? globalThis.String(object.sizeInBytes) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.mimeType !== "") {
            obj.mimeType = message.mimeType;
        }
        if (message.s3Key !== "") {
            obj.s3Key = message.s3Key;
        }
        if (message.originalFileName !== "") {
            obj.originalFileName = message.originalFileName;
        }
        if (message.signedUrl !== "") {
            obj.signedUrl = message.signedUrl;
        }
        if (message.fileType !== "") {
            obj.fileType = message.fileType;
        }
        if (message.sizeInBytes !== "") {
            obj.sizeInBytes = message.sizeInBytes;
        }
        return obj;
    },
    create(base) {
        return exports.PostFileResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostFileResponse();
        message.id = object.id ?? "";
        message.mimeType = object.mimeType ?? "";
        message.s3Key = object.s3Key ?? "";
        message.originalFileName = object.originalFileName ?? "";
        message.signedUrl = object.signedUrl ?? "";
        message.fileType = object.fileType ?? "";
        message.sizeInBytes = object.sizeInBytes ?? "";
        return message;
    },
};
function createBaseVoteOnPollRequest() {
    return { roleId: "", postId: "", optionId: "", role: "", userId: "" };
}
exports.VoteOnPollRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roleId !== "") {
            writer.uint32(10).string(message.roleId);
        }
        if (message.postId !== "") {
            writer.uint32(18).string(message.postId);
        }
        if (message.optionId !== "") {
            writer.uint32(26).string(message.optionId);
        }
        if (message.role !== "") {
            writer.uint32(34).string(message.role);
        }
        if (message.userId !== "") {
            writer.uint32(42).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoteOnPollRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.roleId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.optionId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
            optionId: isSet(object.optionId) ? globalThis.String(object.optionId) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.roleId !== "") {
            obj.roleId = message.roleId;
        }
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        if (message.optionId !== "") {
            obj.optionId = message.optionId;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.VoteOnPollRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVoteOnPollRequest();
        message.roleId = object.roleId ?? "";
        message.postId = object.postId ?? "";
        message.optionId = object.optionId ?? "";
        message.role = object.role ?? "";
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseHealthResponse() {
    return { isHealthy: false };
}
exports.HealthResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isHealthy !== false) {
            writer.uint32(8).bool(message.isHealthy);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isHealthy = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isHealthy: isSet(object.isHealthy) ? globalThis.Boolean(object.isHealthy) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isHealthy !== false) {
            obj.isHealthy = message.isHealthy;
        }
        return obj;
    },
    create(base) {
        return exports.HealthResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHealthResponse();
        message.isHealthy = object.isHealthy ?? false;
        return message;
    },
};
function createBasePostPollResponse() {
    return { id: "", pollEndTime: "", votedProfilePics: [], postPollOptions: [] };
}
exports.PostPollResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.pollEndTime !== "") {
            writer.uint32(18).string(message.pollEndTime);
        }
        for (const v of message.votedProfilePics) {
            writer.uint32(26).string(v);
        }
        for (const v of message.postPollOptions) {
            exports.PostPollOptionResponse.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostPollResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pollEndTime = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.votedProfilePics.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.postPollOptions.push(exports.PostPollOptionResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            pollEndTime: isSet(object.pollEndTime) ? globalThis.String(object.pollEndTime) : "",
            votedProfilePics: globalThis.Array.isArray(object?.votedProfilePics)
                ? object.votedProfilePics.map((e) => globalThis.String(e))
                : [],
            postPollOptions: globalThis.Array.isArray(object?.postPollOptions)
                ? object.postPollOptions.map((e) => exports.PostPollOptionResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.pollEndTime !== "") {
            obj.pollEndTime = message.pollEndTime;
        }
        if (message.votedProfilePics?.length) {
            obj.votedProfilePics = message.votedProfilePics;
        }
        if (message.postPollOptions?.length) {
            obj.postPollOptions = message.postPollOptions.map((e) => exports.PostPollOptionResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.PostPollResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostPollResponse();
        message.id = object.id ?? "";
        message.pollEndTime = object.pollEndTime ?? "";
        message.votedProfilePics = object.votedProfilePics?.map((e) => e) || [];
        message.postPollOptions = object.postPollOptions?.map((e) => exports.PostPollOptionResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBasePostPollOptionResponse() {
    return { id: "", text: "", voteCount: "", indexNumber: "", userVoted: false };
}
exports.PostPollOptionResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        if (message.voteCount !== "") {
            writer.uint32(26).string(message.voteCount);
        }
        if (message.indexNumber !== "") {
            writer.uint32(34).string(message.indexNumber);
        }
        if (message.userVoted !== false) {
            writer.uint32(40).bool(message.userVoted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostPollOptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.voteCount = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.indexNumber = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.userVoted = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            voteCount: isSet(object.voteCount) ? globalThis.String(object.voteCount) : "",
            indexNumber: isSet(object.indexNumber) ? globalThis.String(object.indexNumber) : "",
            userVoted: isSet(object.userVoted) ? globalThis.Boolean(object.userVoted) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.voteCount !== "") {
            obj.voteCount = message.voteCount;
        }
        if (message.indexNumber !== "") {
            obj.indexNumber = message.indexNumber;
        }
        if (message.userVoted !== false) {
            obj.userVoted = message.userVoted;
        }
        return obj;
    },
    create(base) {
        return exports.PostPollOptionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostPollOptionResponse();
        message.id = object.id ?? "";
        message.text = object.text ?? "";
        message.voteCount = object.voteCount ?? "";
        message.indexNumber = object.indexNumber ?? "";
        message.userVoted = object.userVoted ?? false;
        return message;
    },
};
function createBasePostReactionRequest() {
    return { roleId: "", postId: "", reaction: false, reactionType: "", role: "", userId: "" };
}
exports.PostReactionRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roleId !== "") {
            writer.uint32(10).string(message.roleId);
        }
        if (message.postId !== "") {
            writer.uint32(18).string(message.postId);
        }
        if (message.reaction !== false) {
            writer.uint32(24).bool(message.reaction);
        }
        if (message.reactionType !== "") {
            writer.uint32(34).string(message.reactionType);
        }
        if (message.role !== "") {
            writer.uint32(42).string(message.role);
        }
        if (message.userId !== "") {
            writer.uint32(50).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostReactionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.roleId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.reaction = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.reactionType = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            roleId: isSet(object.roleId) ? globalThis.String(object.roleId) : "",
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
            reaction: isSet(object.reaction) ? globalThis.Boolean(object.reaction) : false,
            reactionType: isSet(object.reactionType) ? globalThis.String(object.reactionType) : "",
            role: isSet(object.role) ? globalThis.String(object.role) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.roleId !== "") {
            obj.roleId = message.roleId;
        }
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        if (message.reaction !== false) {
            obj.reaction = message.reaction;
        }
        if (message.reactionType !== "") {
            obj.reactionType = message.reactionType;
        }
        if (message.role !== "") {
            obj.role = message.role;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.PostReactionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostReactionRequest();
        message.roleId = object.roleId ?? "";
        message.postId = object.postId ?? "";
        message.reaction = object.reaction ?? false;
        message.reactionType = object.reactionType ?? "";
        message.role = object.role ?? "";
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseCreator() {
    return { name: "", image: "", isVerified: false };
}
exports.Creator = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.image !== "") {
            writer.uint32(18).string(message.image);
        }
        if (message.isVerified !== false) {
            writer.uint32(24).bool(message.isVerified);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.image = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isVerified = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            image: isSet(object.image) ? globalThis.String(object.image) : "",
            isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.image !== "") {
            obj.image = message.image;
        }
        if (message.isVerified !== false) {
            obj.isVerified = message.isVerified;
        }
        return obj;
    },
    create(base) {
        return exports.Creator.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreator();
        message.name = object.name ?? "";
        message.image = object.image ?? "";
        message.isVerified = object.isVerified ?? false;
        return message;
    },
};
function createBaseAddToPortfolioRequest() {
    return { profileId: "", postIds: [] };
}
exports.AddToPortfolioRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        for (const v of message.postIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToPortfolioRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.postIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            postIds: globalThis.Array.isArray(object?.postIds) ? object.postIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.postIds?.length) {
            obj.postIds = message.postIds;
        }
        return obj;
    },
    create(base) {
        return exports.AddToPortfolioRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddToPortfolioRequest();
        message.profileId = object.profileId ?? "";
        message.postIds = object.postIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseRemoveFromPortfolioRequest() {
    return { profileId: "", postIds: [] };
}
exports.RemoveFromPortfolioRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        for (const v of message.postIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromPortfolioRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.postIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            postIds: globalThis.Array.isArray(object?.postIds) ? object.postIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.postIds?.length) {
            obj.postIds = message.postIds;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFromPortfolioRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveFromPortfolioRequest();
        message.profileId = object.profileId ?? "";
        message.postIds = object.postIds?.map((e) => e) || [];
        return message;
    },
};
function createBasePostResponse() {
    return {
        id: "",
        profileId: "",
        caption: "",
        accessType: "",
        postType: "",
        postMedia: undefined,
        postPoll: undefined,
        postFile: undefined,
        createdAt: "",
        updatedAt: "",
        commentCount: "",
        likeCount: "",
        dislikeCount: "",
        creator: undefined,
        viewerLiked: undefined,
        viewerDisliked: undefined,
    };
}
exports.PostResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.profileId !== "") {
            writer.uint32(18).string(message.profileId);
        }
        if (message.caption !== "") {
            writer.uint32(26).string(message.caption);
        }
        if (message.accessType !== "") {
            writer.uint32(34).string(message.accessType);
        }
        if (message.postType !== "") {
            writer.uint32(42).string(message.postType);
        }
        if (message.postMedia !== undefined) {
            exports.PostMediaResponse.encode(message.postMedia, writer.uint32(50).fork()).join();
        }
        if (message.postPoll !== undefined) {
            exports.PostPollResponse.encode(message.postPoll, writer.uint32(58).fork()).join();
        }
        if (message.postFile !== undefined) {
            exports.PostFileResponse.encode(message.postFile, writer.uint32(66).fork()).join();
        }
        if (message.createdAt !== "") {
            writer.uint32(74).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(82).string(message.updatedAt);
        }
        if (message.commentCount !== "") {
            writer.uint32(90).string(message.commentCount);
        }
        if (message.likeCount !== "") {
            writer.uint32(98).string(message.likeCount);
        }
        if (message.dislikeCount !== "") {
            writer.uint32(106).string(message.dislikeCount);
        }
        if (message.creator !== undefined) {
            exports.Creator.encode(message.creator, writer.uint32(114).fork()).join();
        }
        if (message.viewerLiked !== undefined) {
            writer.uint32(120).bool(message.viewerLiked);
        }
        if (message.viewerDisliked !== undefined) {
            writer.uint32(128).bool(message.viewerDisliked);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.caption = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.accessType = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.postType = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.postMedia = exports.PostMediaResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.postPoll = exports.PostPollResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.postFile = exports.PostFileResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.commentCount = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.likeCount = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.dislikeCount = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.creator = exports.Creator.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.viewerLiked = reader.bool();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.viewerDisliked = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            caption: isSet(object.caption) ? globalThis.String(object.caption) : "",
            accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : "",
            postType: isSet(object.postType) ? globalThis.String(object.postType) : "",
            postMedia: isSet(object.postMedia) ? exports.PostMediaResponse.fromJSON(object.postMedia) : undefined,
            postPoll: isSet(object.postPoll) ? exports.PostPollResponse.fromJSON(object.postPoll) : undefined,
            postFile: isSet(object.postFile) ? exports.PostFileResponse.fromJSON(object.postFile) : undefined,
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
            commentCount: isSet(object.commentCount) ? globalThis.String(object.commentCount) : "",
            likeCount: isSet(object.likeCount) ? globalThis.String(object.likeCount) : "",
            dislikeCount: isSet(object.dislikeCount) ? globalThis.String(object.dislikeCount) : "",
            creator: isSet(object.creator) ? exports.Creator.fromJSON(object.creator) : undefined,
            viewerLiked: isSet(object.viewerLiked) ? globalThis.Boolean(object.viewerLiked) : undefined,
            viewerDisliked: isSet(object.viewerDisliked) ? globalThis.Boolean(object.viewerDisliked) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.caption !== "") {
            obj.caption = message.caption;
        }
        if (message.accessType !== "") {
            obj.accessType = message.accessType;
        }
        if (message.postType !== "") {
            obj.postType = message.postType;
        }
        if (message.postMedia !== undefined) {
            obj.postMedia = exports.PostMediaResponse.toJSON(message.postMedia);
        }
        if (message.postPoll !== undefined) {
            obj.postPoll = exports.PostPollResponse.toJSON(message.postPoll);
        }
        if (message.postFile !== undefined) {
            obj.postFile = exports.PostFileResponse.toJSON(message.postFile);
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        if (message.commentCount !== "") {
            obj.commentCount = message.commentCount;
        }
        if (message.likeCount !== "") {
            obj.likeCount = message.likeCount;
        }
        if (message.dislikeCount !== "") {
            obj.dislikeCount = message.dislikeCount;
        }
        if (message.creator !== undefined) {
            obj.creator = exports.Creator.toJSON(message.creator);
        }
        if (message.viewerLiked !== undefined) {
            obj.viewerLiked = message.viewerLiked;
        }
        if (message.viewerDisliked !== undefined) {
            obj.viewerDisliked = message.viewerDisliked;
        }
        return obj;
    },
    create(base) {
        return exports.PostResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostResponse();
        message.id = object.id ?? "";
        message.profileId = object.profileId ?? "";
        message.caption = object.caption ?? "";
        message.accessType = object.accessType ?? "";
        message.postType = object.postType ?? "";
        message.postMedia = (object.postMedia !== undefined && object.postMedia !== null)
            ? exports.PostMediaResponse.fromPartial(object.postMedia)
            : undefined;
        message.postPoll = (object.postPoll !== undefined && object.postPoll !== null)
            ? exports.PostPollResponse.fromPartial(object.postPoll)
            : undefined;
        message.postFile = (object.postFile !== undefined && object.postFile !== null)
            ? exports.PostFileResponse.fromPartial(object.postFile)
            : undefined;
        message.createdAt = object.createdAt ?? "";
        message.updatedAt = object.updatedAt ?? "";
        message.commentCount = object.commentCount ?? "";
        message.likeCount = object.likeCount ?? "";
        message.dislikeCount = object.dislikeCount ?? "";
        message.creator = (object.creator !== undefined && object.creator !== null)
            ? exports.Creator.fromPartial(object.creator)
            : undefined;
        message.viewerLiked = object.viewerLiked ?? undefined;
        message.viewerDisliked = object.viewerDisliked ?? undefined;
        return message;
    },
};
function createBaseGetUserPostsRequest() {
    return { profileId: "", userId: "" };
}
exports.GetUserPostsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserPostsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.GetUserPostsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserPostsRequest();
        message.profileId = object.profileId ?? "";
        message.userId = object.userId ?? "";
        return message;
    },
};
exports.PostServiceServiceName = "post.PostService";
class PostServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.PostServiceServiceName;
        this.rpc = rpc;
        this.Create = this.Create.bind(this);
        this.Update = this.Update.bind(this);
        this.GenerateUploadUrl = this.GenerateUploadUrl.bind(this);
        this.GetFeed = this.GetFeed.bind(this);
        this.VoteOnPoll = this.VoteOnPoll.bind(this);
        this.GetUserPosts = this.GetUserPosts.bind(this);
        this.PostReaction = this.PostReaction.bind(this);
        this.CreateComment = this.CreateComment.bind(this);
        this.GetComments = this.GetComments.bind(this);
        this.DeletePost = this.DeletePost.bind(this);
        this.AddToPortfolio = this.AddToPortfolio.bind(this);
        this.RemoveFromPortfolio = this.RemoveFromPortfolio.bind(this);
        this.GetPortfolio = this.GetPortfolio.bind(this);
        this.Health = this.Health.bind(this);
    }
    Create(request) {
        const data = exports.CreatePostRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Create", data);
        return promise.then((data) => exports.PostResponse.decode(new wire_1.BinaryReader(data)));
    }
    Update(request) {
        const data = exports.UpdatePostRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Update", data);
        return promise.then((data) => exports.PostResponse.decode(new wire_1.BinaryReader(data)));
    }
    GenerateUploadUrl(request) {
        const data = exports.GenerateUploadUrlRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GenerateUploadUrl", data);
        return promise.then((data) => exports.GenerateUploadUrlResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetFeed(request) {
        const data = exports.GetFeedRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetFeed", data);
        return promise.then((data) => exports.GetFeedResponse.decode(new wire_1.BinaryReader(data)));
    }
    VoteOnPoll(request) {
        const data = exports.VoteOnPollRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "VoteOnPoll", data);
        return promise.then((data) => exports.PostResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetUserPosts(request) {
        const data = exports.GetUserPostsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetUserPosts", data);
        return promise.then((data) => exports.GetFeedResponse.decode(new wire_1.BinaryReader(data)));
    }
    PostReaction(request) {
        const data = exports.PostReactionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "PostReaction", data);
        return promise.then((data) => exports.PostResponse.decode(new wire_1.BinaryReader(data)));
    }
    CreateComment(request) {
        const data = exports.CreateCommentRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateComment", data);
        return promise.then((data) => exports.CommentResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetComments(request) {
        const data = exports.GetCommentsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetComments", data);
        return promise.then((data) => exports.GetCommentsResponse.decode(new wire_1.BinaryReader(data)));
    }
    DeletePost(request) {
        const data = exports.DeletePostRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeletePost", data);
        return promise.then((data) => exports.SuccessResponse.decode(new wire_1.BinaryReader(data)));
    }
    AddToPortfolio(request) {
        const data = exports.AddToPortfolioRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddToPortfolio", data);
        return promise.then((data) => exports.SuccessResponse.decode(new wire_1.BinaryReader(data)));
    }
    RemoveFromPortfolio(request) {
        const data = exports.RemoveFromPortfolioRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemoveFromPortfolio", data);
        return promise.then((data) => exports.SuccessResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPortfolio(request) {
        const data = exports.GetPortfolioRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPortfolio", data);
        return promise.then((data) => exports.GetFeedResponse.decode(new wire_1.BinaryReader(data)));
    }
    Health(request) {
        const data = empty_1.Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "Health", data);
        return promise.then((data) => exports.HealthResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.PostServiceClientImpl = PostServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=post.js.map