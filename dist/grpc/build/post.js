"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: post.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostServiceClientImpl = exports.PostServiceServiceName = exports.PostResponse = exports.GenerateUploadUrlResponse = exports.GenerateUploadUrlRequest = exports.GetPostsByIdsResponse = exports.GetPostsByIdsRequest = exports.UpdatePostRequest = exports.CreatePostRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "post";
function createBaseCreatePostRequest() {
    return {
        userId: "",
        caption: "",
        accessType: "",
        priceInCents: undefined,
        s3Key: "",
        fileType: "",
        originalFileName: undefined,
    };
}
exports.CreatePostRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.caption !== "") {
            writer.uint32(18).string(message.caption);
        }
        if (message.accessType !== "") {
            writer.uint32(26).string(message.accessType);
        }
        if (message.priceInCents !== undefined) {
            writer.uint32(32).int32(message.priceInCents);
        }
        if (message.s3Key !== "") {
            writer.uint32(42).string(message.s3Key);
        }
        if (message.fileType !== "") {
            writer.uint32(50).string(message.fileType);
        }
        if (message.originalFileName !== undefined) {
            writer.uint32(58).string(message.originalFileName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePostRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.caption = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.accessType = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.priceInCents = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.s3Key = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.fileType = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.originalFileName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            caption: isSet(object.caption) ? globalThis.String(object.caption) : "",
            accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : "",
            priceInCents: isSet(object.priceInCents) ? globalThis.Number(object.priceInCents) : undefined,
            s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : "",
            fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
            originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.caption !== "") {
            obj.caption = message.caption;
        }
        if (message.accessType !== "") {
            obj.accessType = message.accessType;
        }
        if (message.priceInCents !== undefined) {
            obj.priceInCents = Math.round(message.priceInCents);
        }
        if (message.s3Key !== "") {
            obj.s3Key = message.s3Key;
        }
        if (message.fileType !== "") {
            obj.fileType = message.fileType;
        }
        if (message.originalFileName !== undefined) {
            obj.originalFileName = message.originalFileName;
        }
        return obj;
    },
    create(base) {
        return exports.CreatePostRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePostRequest();
        message.userId = object.userId ?? "";
        message.caption = object.caption ?? "";
        message.accessType = object.accessType ?? "";
        message.priceInCents = object.priceInCents ?? undefined;
        message.s3Key = object.s3Key ?? "";
        message.fileType = object.fileType ?? "";
        message.originalFileName = object.originalFileName ?? undefined;
        return message;
    },
};
function createBaseUpdatePostRequest() {
    return { id: "", userId: "", caption: undefined, accessType: undefined, priceInCents: undefined };
}
exports.UpdatePostRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.caption !== undefined) {
            writer.uint32(26).string(message.caption);
        }
        if (message.accessType !== undefined) {
            writer.uint32(34).string(message.accessType);
        }
        if (message.priceInCents !== undefined) {
            writer.uint32(40).int32(message.priceInCents);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePostRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.caption = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.accessType = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.priceInCents = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
            accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : undefined,
            priceInCents: isSet(object.priceInCents) ? globalThis.Number(object.priceInCents) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.caption !== undefined) {
            obj.caption = message.caption;
        }
        if (message.accessType !== undefined) {
            obj.accessType = message.accessType;
        }
        if (message.priceInCents !== undefined) {
            obj.priceInCents = Math.round(message.priceInCents);
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePostRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePostRequest();
        message.id = object.id ?? "";
        message.userId = object.userId ?? "";
        message.caption = object.caption ?? undefined;
        message.accessType = object.accessType ?? undefined;
        message.priceInCents = object.priceInCents ?? undefined;
        return message;
    },
};
function createBaseGetPostsByIdsRequest() {
    return { ids: [] };
}
exports.GetPostsByIdsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.ids) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPostsByIdsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ids.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e) => globalThis.String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.ids?.length) {
            obj.ids = message.ids;
        }
        return obj;
    },
    create(base) {
        return exports.GetPostsByIdsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPostsByIdsRequest();
        message.ids = object.ids?.map((e) => e) || [];
        return message;
    },
};
function createBaseGetPostsByIdsResponse() {
    return { posts: [] };
}
exports.GetPostsByIdsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.posts) {
            exports.PostResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPostsByIdsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.posts.push(exports.PostResponse.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e) => exports.PostResponse.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.posts?.length) {
            obj.posts = message.posts.map((e) => exports.PostResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetPostsByIdsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPostsByIdsResponse();
        message.posts = object.posts?.map((e) => exports.PostResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGenerateUploadUrlRequest() {
    return { userId: "", fileName: "", contentType: "" };
}
exports.GenerateUploadUrlRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.fileName !== "") {
            writer.uint32(18).string(message.fileName);
        }
        if (message.contentType !== "") {
            writer.uint32(26).string(message.contentType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateUploadUrlRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.fileName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.contentType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
            contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.fileName !== "") {
            obj.fileName = message.fileName;
        }
        if (message.contentType !== "") {
            obj.contentType = message.contentType;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateUploadUrlRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenerateUploadUrlRequest();
        message.userId = object.userId ?? "";
        message.fileName = object.fileName ?? "";
        message.contentType = object.contentType ?? "";
        return message;
    },
};
function createBaseGenerateUploadUrlResponse() {
    return { uploadUrl: "", key: "" };
}
exports.GenerateUploadUrlResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uploadUrl !== "") {
            writer.uint32(10).string(message.uploadUrl);
        }
        if (message.key !== "") {
            writer.uint32(18).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateUploadUrlResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.uploadUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            uploadUrl: isSet(object.uploadUrl) ? globalThis.String(object.uploadUrl) : "",
            key: isSet(object.key) ? globalThis.String(object.key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.uploadUrl !== "") {
            obj.uploadUrl = message.uploadUrl;
        }
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateUploadUrlResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenerateUploadUrlResponse();
        message.uploadUrl = object.uploadUrl ?? "";
        message.key = object.key ?? "";
        return message;
    },
};
function createBasePostResponse() {
    return {
        id: "",
        userId: "",
        caption: "",
        accessType: "",
        priceInCents: undefined,
        s3Key: "",
        fileType: "",
        originalFileName: "",
        createdAt: "",
        updatedAt: "",
    };
}
exports.PostResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.caption !== "") {
            writer.uint32(26).string(message.caption);
        }
        if (message.accessType !== "") {
            writer.uint32(34).string(message.accessType);
        }
        if (message.priceInCents !== undefined) {
            writer.uint32(40).int32(message.priceInCents);
        }
        if (message.s3Key !== "") {
            writer.uint32(50).string(message.s3Key);
        }
        if (message.fileType !== "") {
            writer.uint32(58).string(message.fileType);
        }
        if (message.originalFileName !== "") {
            writer.uint32(66).string(message.originalFileName);
        }
        if (message.createdAt !== "") {
            writer.uint32(74).string(message.createdAt);
        }
        if (message.updatedAt !== "") {
            writer.uint32(82).string(message.updatedAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.caption = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.accessType = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.priceInCents = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.s3Key = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.fileType = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.originalFileName = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.updatedAt = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            caption: isSet(object.caption) ? globalThis.String(object.caption) : "",
            accessType: isSet(object.accessType) ? globalThis.String(object.accessType) : "",
            priceInCents: isSet(object.priceInCents) ? globalThis.Number(object.priceInCents) : undefined,
            s3Key: isSet(object.s3Key) ? globalThis.String(object.s3Key) : "",
            fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
            originalFileName: isSet(object.originalFileName) ? globalThis.String(object.originalFileName) : "",
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.caption !== "") {
            obj.caption = message.caption;
        }
        if (message.accessType !== "") {
            obj.accessType = message.accessType;
        }
        if (message.priceInCents !== undefined) {
            obj.priceInCents = Math.round(message.priceInCents);
        }
        if (message.s3Key !== "") {
            obj.s3Key = message.s3Key;
        }
        if (message.fileType !== "") {
            obj.fileType = message.fileType;
        }
        if (message.originalFileName !== "") {
            obj.originalFileName = message.originalFileName;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.updatedAt !== "") {
            obj.updatedAt = message.updatedAt;
        }
        return obj;
    },
    create(base) {
        return exports.PostResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostResponse();
        message.id = object.id ?? "";
        message.userId = object.userId ?? "";
        message.caption = object.caption ?? "";
        message.accessType = object.accessType ?? "";
        message.priceInCents = object.priceInCents ?? undefined;
        message.s3Key = object.s3Key ?? "";
        message.fileType = object.fileType ?? "";
        message.originalFileName = object.originalFileName ?? "";
        message.createdAt = object.createdAt ?? "";
        message.updatedAt = object.updatedAt ?? "";
        return message;
    },
};
exports.PostServiceServiceName = "post.PostService";
class PostServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.PostServiceServiceName;
        this.rpc = rpc;
        this.Create = this.Create.bind(this);
        this.Update = this.Update.bind(this);
        this.GetPostsByIds = this.GetPostsByIds.bind(this);
        this.GenerateUploadUrl = this.GenerateUploadUrl.bind(this);
    }
    Create(request) {
        const data = exports.CreatePostRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Create", data);
        return promise.then((data) => exports.PostResponse.decode(new wire_1.BinaryReader(data)));
    }
    Update(request) {
        const data = exports.UpdatePostRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Update", data);
        return promise.then((data) => exports.PostResponse.decode(new wire_1.BinaryReader(data)));
    }
    GetPostsByIds(request) {
        const data = exports.GetPostsByIdsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetPostsByIds", data);
        return promise.then((data) => exports.GetPostsByIdsResponse.decode(new wire_1.BinaryReader(data)));
    }
    GenerateUploadUrl(request) {
        const data = exports.GenerateUploadUrlRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GenerateUploadUrl", data);
        return promise.then((data) => exports.GenerateUploadUrlResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.PostServiceClientImpl = PostServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=post.js.map